--// DHM
local function DaHoodModded()
    local m_thread = task do
        setreadonly(m_thread, false)
    
        function m_thread.spawn_loop(p_time, p_callback)
            m_thread.spawn(function()
                while Run.RenderStepped:Wait() do
                    p_callback()
                    m_thread.wait(p_time)
                end
            end)
        end
    
        setreadonly(m_thread, true)
    end
    
    getgenv().client = {
        connections = {} 
    }

    local library, pointers = loadstring(game:HttpGet("https://hvh.wtf/p/raw/osiris/rcvi2n1b80"))()
        
    if not LPH_OBFUSCATED then 
        LPH_JIT_MAX = function(...) return (...) end;
        LPH_NO_VIRTUALIZE = function(...) return (...) end;
    end
    
    local UIS                                       = game:GetService("UserInputService")
    local Tween                                     = game:GetService("TweenService")
    local Run                                       = game:GetService("RunService")
    local Lighting                                  = game:GetService("Lighting")
    local ReplicatedStorage                         = game:GetService("ReplicatedStorage")
    local Camera                                    = game.Workspace.CurrentCamera
    local floor,rad,sin,abs,cos,pi,tan,halfpi       = math.floor,math.rad,math.sin,math.abs,math.cos,math.pi,math.tan,math.pi/2
    local CC                                        = game.Workspace.CurrentCamera
    local Players                                   = game:GetService("Players")
    local lp                                        = Players.LocalPlayer
    local ws                                        = game.Workspace 
    local Mouse                                     = lp:GetMouse() 
    
    local Themes = {
        ['Purple Dark'] = {
            Accent = Color3.fromRGB(127, 72, 163),
            lightcontrast = Color3.fromRGB(30,30,30),
            darkcontrast = Color3.fromRGB(25,25,25),
            outline = Color3.fromRGB(0, 0, 0),
            inline = Color3.fromRGB(50, 50, 50),
            textcolor = Color3.fromRGB(255, 255, 255),
            textborder = Color3.fromRGB(0, 0, 0),
            cursoroutline = Color3.fromRGB(10, 10, 10),
        },
        ['Onetap'] = {
            Accent = Color3.new(1, 0.743707, 0.188406),
            lightcontrast = Color3.new(0.171498, 0.182266, 0.207602),
            darkcontrast = Color3.new(0.110052, 0.115297, 0.143275),
            outline = Color3.new(0, 0, 0),
            inline = Color3.new(0.230994, 0.229878, 0.229878),
            textcolor = Color3.new(1, 1, 1),
            textborder = Color3.new(0 ,0, 0),
            cursoroutline = Color3.new(0, 0, 0.03921568766236305),
        },
        ['Aimware'] = {
            Accent = Color3.new(0.657895, 0.127129, 0.127129),
            lightcontrast = Color3.new(0.131579, 0.1311579, 0.1311579),
            darkcontrast = Color3.new(0.0672515, 0.057791, 0.0597791),
            outline = Color3.new(0,0,0),
            inline = Color3.new(0.230994, 0.229878, 0.229878),
            textcolor = Color3.new(1, 1, 1),
            textborder = Color3.new(0, 0, 0),
            cursoroutline = Color3.new(0, 0, 0.03921568766236305),
        },
        ['Entropy'] = {
            Accent = Color3.new(0, 0.824561, 1),
            lightcontrast = Color3.new(0.150436, 0.168558, 0.219298),
            darkcontrast = Color3.new(0.109501, 0.114367, 0.149123),
            outline = Color3.new(0,0,0),
            inline = Color3.new(0.230994, 0.229878, 0.229878),
            textcolor = Color3.new(1, 1, 1),
            textborder = Color3.new(0, 0, 0),
            cursoroutline = Color3.new(0, 0, 0.03921568766236305),
        },
        ['Neko'] = {
            Accent = Color3.new(0, 0.824561, 1),
            lightcontrast = Color3.new(0.150436, 0.168558, 0.219298),
            darkcontrast = Color3.new(0.109501, 0.114367, 0.149123),
            outline = Color3.new(0,0,0),
            inline = Color3.new(0.230994, 0.229878, 0.229878),
            textcolor = Color3.new(1, 1, 1),
            textborder = Color3.new(0, 0, 0),
            cursoroutline = Color3.new(0, 0, 0.03921568766236305),
        },
        ['Interwebz'] = {
            Accent = Color3.new(0.745614, 0.4366, 0.158488),
            lightcontrast = Color3.new(0.17,0.132695,0.225146),
            darkcontrast = Color3.new(0.117932,0.0845976,0.154971),
            outline = Color3.new(0,0,0),
            inline = Color3.new(0.230994,0.229878,0.229878),
            textcolor = Color3.new(1,1,1),
            textborder = Color3.new(0,0,0),
            cursoroutline = Color3.new(0,0,0.03921568766236305),
        },
    }
    
    local Cheat_Name = "Osiris PRO"
    local Default_Accent = Color3.fromRGB(255,22,22)
    
    local drawingPool =         {}
    local function newDrawing(type, prop)
    local obj = Drawing.new(type)
        if prop then
            for i,v in next, prop do
                obj[i] = v
            end
        end
        return obj  
    end
    
    local SkyBoxes = {
        ["Normal"] = {600886090,600830446,600831635,600832720,600833862,600835177},
        ["DoomSpire"] = {6050649245,6050664592,6050648475,6050644331,6050649718,6050650083},
        ["CatGirl"] = {444167615,444167615,444167615,444167615,444167615,444167615},
        ["Vibe"] = {1417494402,1417494030,1417494146,1417494253,1417494499,1417494643},
        ["Blue Aurora"] = {12063984,12064107,12064152,12064121,12064115,12064131},
        ["Purple Clouds"] = {151165191,151165214,151165197,151165224,151165206,151165227},
        ["Purple Nebula"] = {159454286,159454299,159454296,159454293,159454300,159454288},
        ["Twighlight"] = {264909758,264908339,264907909,264909420,264908886,264907379},
        ["Vivid Skies"] = {271042310,271042516,271077243,271042556,271042467,271077958},
        ["Purple and Blue"] = {149397684,149397692,149397686,149397697,149397688,149397702},
    }
    
    local TracerTextures = {
        ["Lightning"] = 446111271,
        ["Laser 1"] = 7136858729,
        ["Laser 2"] = 6333823534,
        ["Energy"] = 5864341017,
        ["Laser"] = 446111271,
    }
    
    local ws = game.Workspace
    local Options = {
       "Health",
    }
    
    local Colours = {
       ["Health"] = Color3.fromRGB(112, 41, 99),
    }
    
    local Sliders = {}
    local Instances = {} 
    --
    local Outline = Drawing.new("Square")
    Outline.Size = Vector2.new(300, (49 + (#Options * 20)))
    Outline.Position = Vector2.new(806, 831)
    Outline.Color = Color3.fromRGB(0, 0, 0)
    Outline.Filled = true
    Outline.Visible = true
    --
    local Inline = Drawing.new("Square")
    Inline.Size = Vector2.new(Outline.Size.X - 2, Outline.Size.Y - 2)
    Inline.Position = Vector2.new(Outline.Position.X + 1, Outline.Position.Y + 1)
    Inline.Color = Color3.fromRGB(0, 0, 0)
    Inline.Filled = true
    Inline.Visible = true
    --
    local Frame = Drawing.new("Square")
    Frame.Size = Vector2.new(Inline.Size.X - 1, Inline.Size.Y - 1)
    Frame.Position = Vector2.new(Inline.Position.X, Inline.Position.Y)
    Frame.Color = Color3.fromRGB(20, 20, 20)
    Frame.Filled = true
    Frame.Visible = true
    --
    local Accent = Drawing.new("Square")
    Accent.Size = Vector2.new(Frame.Size.X, 2)
    Accent.Position = Vector2.new(Frame.Position.X, Frame.Position.Y)
    Accent.Color = Color3.fromRGB(112, 41, 99)
    Accent.Filled = true
    Accent.Visible = true
    -- 
    local Accent_Gradient = Drawing.new("Image")
    Accent_Gradient.Size = Vector2.new(Frame.Size.X, 2)
    Accent_Gradient.Position = Vector2.new(Frame.Position.X, Frame.Position.Y)
    Accent_Gradient.Data = game:HttpGet("https://raw.githubusercontent.com/portallol/luna/main/Gradient180.png")
    Accent_Gradient.Visible = true
    --
    for Index, Value in pairs(Options) do
        local Slider = {}
        --
        getgenv().Value_Outline = Drawing.new("Square")
        Value_Outline.Size = Vector2.new(Frame.Size.X - 100, 20)
        Value_Outline.Position = Vector2.new(Frame.Position.X + 80, Frame.Position.Y + 18 + ((Index - 1) * 30))
        Value_Outline.Color = Color3.fromRGB(0, 0, 0)
        Value_Outline.Filled = true
        Value_Outline.Visible = false
        --
        getgenv().Value_Inline = Drawing.new("Square")
        Value_Inline.Size = Vector2.new(Value_Outline.Size.X - 2, Value_Outline.Size.Y - 2)
        Value_Inline.Position = Vector2.new(Value_Outline.Position.X + 1, Value_Outline.Position.Y + 1)
        Value_Inline.Color = Color3.fromRGB(50, 50, 50)
        Value_Inline.Filled = true
        Value_Inline.Visible = false
        --
        getgenv().Value_Frame = Drawing.new("Square")
        Value_Frame.Size = Vector2.new(Value_Inline.Size.X - 2, Value_Inline.Size.Y - 2)
        Value_Frame.Position = Vector2.new(Value_Inline.Position.X + 1, Value_Inline.Position.Y + 1)
        Value_Frame.Color = Color3.fromRGB(30, 30, 30)
        Value_Frame.Filled = true
        Value_Frame.Visible = true
        --
        getgenv().Value_Slider = Drawing.new("Square")
        Value_Slider.Size = Vector2.new(0, Value_Frame.Size.Y)
        Value_Slider.Position = Vector2.new(Value_Frame.Position.X, Value_Frame.Position.Y)
        Value_Slider.Color = Colours[Value]
        Value_Slider.Filled = true
        Value_Slider.Visible = true
        --  
        getgenv().Value_Slider_Gradient = Drawing.new("Image")
        Value_Slider_Gradient.Size = Vector2.new(0, Value_Frame.Size.Y)
        Value_Slider_Gradient.Position = Vector2.new(Value_Frame.Position.X, Value_Frame.Position.Y)
        Value_Slider_Gradient.Data = game:HttpGet("https://raw.githubusercontent.com/portallol/luna/main/Gradient180.png")
        Value_Slider_Gradient.Visible = true
        --  
        local pImageData = game:GetService("HttpService"):JSONDecode(game:HttpGet(("https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds=%s&size=352x352&format=Png&isCircular=false"):format(lp.UserId)))
        local imagedata  = game:HttpGet((pImageData["data"][1]["imageUrl"]))
        getgenv().TargetDrawing = Drawing.new("Image")
        TargetDrawing.Size = Vector2.new(60,60)
        TargetDrawing.Position = Vector2.new(Value_Inline.Position.X - 72, Frame.Position.Y + 5)
        TargetDrawing.Data = imagedata
        TargetDrawing.Visible = true
        TargetDrawing.ZIndex = 1
        --
        getgenv().Title = Drawing.new("Text")
        Title.Position = Vector2.new(Value_Slider.Position.X, Frame.Position.Y + 4)
        Title.Size = 13
        Title.Font = 2
        Title.Text = "".. lp.Name .." [" .. lp.DisplayName .."]"
        Title.Color = Color3.fromRGB(255, 255, 255)
        Title.Outline = true
        Title.Visible = true
        --
        function Slider:Set(Percentage, Text)
            Value_Slider.Size = Vector2.new(Value_Frame.Size.X * Percentage, Value_Frame.Size.Y)
            Value_Slider_Gradient.Size = Vector2.new(Value_Frame.Size.X * Percentage, Value_Frame.Size.Y)
        end
        
        function Slider:SetVisible(Bool)
            Outline.Visible = Bool
            Inline.Visible = Bool
            Frame.Visible = Bool
            Accent.Visible = Bool
            Accent_Gradient.Visible = Bool
            Value_Outline.Visible = Bool
            Value_Inline.Visible = Bool
            Value_Frame.Visible = Bool
            Value_Slider.Visible = Bool
            Value_Slider_Gradient.Visible = Bool
            TargetDrawing.Visible = Bool
            Title.Visible = Bool
        end 
        
        function Slider:Destroy()
            TargetDrawing:Remove()
            Value_Slider_Gradient:Remove()
            Value_Slider:Remove()
            Value_Frame:Remove()
            Value_Inline:Remove()
            Value_Outline:Remove()
            Accent_Gradient:Remove() 
            Accent:Remove() 
            Frame:Remove() 
            Inline:Remove() 
            Outline:Remove() 
            getgenv().Title:Remove() 
        end 
        --
        Sliders[Value] = Slider
    end
    
    Sliders["Health"]:SetVisible(false)
    
    local Settings = {
        MiddleGap = 60,
        Size = 20,
        FollowCursor = false,
        Thickness = 1.5
    }
    
    local Cursor = {
        Line1 = newDrawing("Line", { -- shitty ass func
        Color = White,
        Visible = true,
        Thickness = Settings.Thickness,
        From = Vector2.new(Camera.ViewportSize.X/2 + Settings.MiddleGap, Camera.ViewportSize.Y/2),
        To = Vector2.new(Camera.ViewportSize.X/2 + Settings.Size, Camera.ViewportSize.Y/2),
        ZIndex = 9e9,
    }),
        Line2 = newDrawing("Line", {
        Color = White,
        Visible = true,
        Thickness = Settings.Thickness,
        From = Vector2.new(Camera.ViewportSize.X/2 - Settings.MiddleGap, Camera.ViewportSize.Y/2),
        To = Vector2.new(Camera.ViewportSize.X/2 - Settings.Size , Camera.ViewportSize.Y/2),
        ZIndex = 9e9,
    }),
        Line3 = newDrawing("Line", {
        Color = White,
        Visible = true,
        Thickness = Settings.Thickness,
        From = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2 - Settings.MiddleGap),
        To = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2 - Settings.Size),
        ZIndex = 9e9,
    }),
        Line4 = newDrawing("Line", {
        Color = White,
        Visible = true,
        Thickness = Settings.Thickness,
        From = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2 + Settings.MiddleGap),
        To = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2 + Settings.Size),
        ZIndex = 9e9,
    }),
    }
    
    local Outlines = {
        OutlineLine1 = newDrawing("Line", {
        Color = Color3.fromRGB(0, 0, 0),
        Visible = true,
        Thickness = Settings.Thickness,
        From = Vector2.new(Camera.ViewportSize.X/2 + Settings.MiddleGap, Camera.ViewportSize.Y/2),
        To = Vector2.new(Camera.ViewportSize.X/2 + Settings.Size, Camera.ViewportSize.Y/2),
    
    }),
        OutlineLine2 = newDrawing("Line", {
        Color = Color3.fromRGB(0, 0, 0),
        Visible = true,
        Thickness = Settings.Thickness,
        From = Vector2.new(Camera.ViewportSize.X/2 - Settings.MiddleGap, Camera.ViewportSize.Y/2),
        To = Vector2.new(Camera.ViewportSize.X/2 - Settings.Size , Camera.ViewportSize.Y/2),
    }),
        OutlineLine3 = newDrawing("Line", {
        Color = Color3.fromRGB(0, 0, 0),
        Visible = true,
        Thickness = Settings.Thickness,
        From = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2 - Settings.MiddleGap),
        To = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2 - Settings.Size),
    }),
        OutlineLine4 = newDrawing("Line", {
        Color = Color3.fromRGB(0, 0, 0),
        Visible = true,
        Thickness = Settings.Thickness,
        From = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2 + Settings.MiddleGap),
        To = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2 + Settings.Size),
    }),
    }
    
    for _,v in next, Cursor do 
        v.Visible = false 
    end 

    --// Name call only
    function DisableHook(HookVariable) 
        local mt = getrawmetatable(game)
        setreadonly(mt, false)
        mt.__namecall = HookVariable
        setreadonly(mt, true)
    end 
    
    for _,v in next, Outlines do 
        v.Visible = false 
    end 

    Outlines.OutlineLine1.ZIndex = 1
    Outlines.OutlineLine2.ZIndex = 1
    Outlines.OutlineLine3.ZIndex = 1
    Outlines.OutlineLine4.ZIndex = 1
    
    Cursor.Line1.ZIndex = 2
    Cursor.Line2.ZIndex = 2
    Cursor.Line3.ZIndex = 2
    Cursor.Line4.ZIndex = 2

    getgenv().Lock = Drawing.new("Circle")
    Lock.Radius = 100 
    Lock.Position = Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/2)
    Lock.Visible = false
    Lock.Thickness = 1
    Lock.Color = Color3.fromRGB(255,255,255)
    Lock.ZIndex = 2 
    
    getgenv().LockOutline = Drawing.new("Circle")
    LockOutline.Radius = 100 
    LockOutline.Position = Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/2)
    LockOutline.Visible = false 
    LockOutline.Thickness = 3.5
    LockOutline.Color = Color3.fromRGB(0,0,0)
    LockOutline.ZIndex = 1
    
    local BeamPart = Instance.new("Part", workspace)
    BeamPart.Name = "BeamPart"
    BeamPart.Transparency = 1
    
    
    
    local function getClosestPlayerToCursor(Radius)
        local shortestDistance = Radius
    
        local closestPlayer
        for i, v in pairs(Players:GetPlayers()) do
            if v ~= lp and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("Head") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild("HumanoidRootPart") then
                local pos,OnScreen = CC:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
                    local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).magnitude
                        if magnitude < shortestDistance and OnScreen then
                            closestPlayer = v
                            shortestDistance = magnitude
                        end
                    end
                end 
        return closestPlayer
    end
    
    local function ClosestPart(Player,List)
        local shortestDistance = math.huge
        local closestPart
        if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("Head") and Player.Character.Humanoid.Health ~= 0 and Player.Character:FindFirstChild("HumanoidRootPart") then
            for i, v in pairs(Player.Character:GetChildren()) do
                if v:IsA("BasePart") then 
                    local pos = CC:WorldToViewportPoint(v.Position)
                    local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y+36)).magnitude
                        if magnitude < shortestDistance and table.find(List,v.Name) then
                            closestPart = v
                            shortestDistance = magnitude
                        end
                    end
                end 
            return closestPart
        end
    end 
    
    function WallCheck(head)
        if not table.find(pointers["checks"]:get(), "Wall Check") then return false end 
        if v == lp then return false end
            local castPoints = {lp.Character.Head.Position, head.Position}
            local ignoreList = {lp.Character,head.Parent}
            a = game.Workspace.CurrentCamera:GetPartsObscuringTarget(castPoints, ignoreList)
            if #a == 0 then return false end
            return true
        end 
    
    
        function KnockCheck(head)
        if not table.find(pointers["checks"]:get(), "Knock Check") then return true end 
    
        if head:FindFirstChild("Humanoid") and head["I_LOADED_I"]["K.O"].Value == true then 
            return false 
        else
            return true
        end 
    end
    
    function FOVCHECK(Player) 
        if getgenv().Lock.Visible == false then return true end 
    
        local FOVCheck = getgenv().Lock.Radius
    
        if Player ~= lp and Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character.Humanoid.Health ~= 0 and Player.Character:FindFirstChild("LowerTorso") then
        local pos = Camera:WorldToViewportPoint(Player.Character.PrimaryPart.Position)
        local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).magnitude
            if magnitude < FOVCheck then
                FOVCheck = magnitude 
                return true 
            else 
                return false 
            end
        end
    end 
    
    local function tool() 
        if lp.Character and lp.Character:FindFirstChildWhichIsA("Tool") then 
            return lp.Character:FindFirstChildWhichIsA("Tool") 
        end 
    end 
    
    --// Bullet Tracer Function
    function createBeam(v1, v2)
        local Part = Instance.new("Part", BeamPart)
        Part.Size = Vector3.new(1, 1, 1)
        Part.Transparency = 1
        Part.CanCollide = false
        Part.CFrame = CFrame.new(v1)
        Part.Anchored = true
        local Attachment = Instance.new("Attachment", Part)
        local Part2 = Instance.new("Part", BeamPart)
        Part2.Size = Vector3.new(1, 1, 1)
        Part2.Transparency = 1
        Part2.CanCollide = false
        Part2.CFrame = CFrame.new(v2)
        Part2.Anchored = true
        Part2.Color = Color3.fromRGB(255, 255, 255)
        local Attachment2 = Instance.new("Attachment", Part2)
        local Beam = Instance.new("Beam", Part)
        Beam.FaceCamera = true
        Beam.Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0.00 ,Beam1),
            ColorSequenceKeypoint.new(1 ,Beam2),
        }
        Beam.Attachment0 = Attachment
        Beam.Attachment1 = Attachment2
        Beam.LightEmission = 6
        Beam.LightInfluence = 1
        Beam.Width0 = 1
        Beam.Width1 = 0.6
        Beam.Texture = "rbxassetid://" .. TracerTextures[pointers["bullet_tracer_texture"]:get()]
        Beam.LightEmission = 1
        Beam.LightInfluence = 1
        Beam.TextureMode = Enum.TextureMode.Wrap 
        Beam.TextureLength = 3 
        Beam.TextureSpeed = 3
        delay(1, function()
        for i = 0.5, 1, 0.02 do
        wait()
        Beam.Transparency = NumberSequence.new(i)
        end
        Part:Destroy()
        Part2:Destroy()
        end)
    end
    
    local function Chance(percentage)
        local Chance = percentage 
    
        if math.random(1,100) <= percentage then 
            return true 
        else 
            return false
        end 
    end 
    
    function Clone(Player,Color,Material,Transparency)
        for i,v in pairs(Player.Character:GetChildren()) do 
            if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then 
                local ClonedPart = Instance.new("Part")
                ClonedPart.Anchored = true 
                ClonedPart.CanCollide = false 
                ClonedPart.Position = v.Position
                ClonedPart.Parent = ws.Terrain 
                ClonedPart.Material = Enum.Material[Material]
                ClonedPart.Shape = Enum.PartType.Block 
                ClonedPart.Transparency = Transparency 
                ClonedPart.Color = Color
                ClonedPart.Size = v.Size + Vector3.new(0.01,0.01,0.01)
                ClonedPart.Name = v.Name
                ClonedPart.Rotation = v.Rotation
            end 
        end
    end  
    
    
    
    local FolderMain = Instance.new("Folder")
    FolderMain.Name = "hi"
    FolderMain.Parent = ws
    
        local TargetPart = Instance.new("Part")
            TargetPart.Anchored = false 
            TargetPart.CanCollide = false 
            TargetPart.CFrame = CFrame.new(9999,9999,9999)
            TargetPart.Parent = game.Workspace
            TargetPart.Material = Enum.Material.Neon
            TargetPart.Shape = Enum.PartType.Block 
            TargetPart.Transparency = 0.8
            TargetPart.Color = Color3.fromRGB(255,255,255)

        local Tracer = Drawing.new("Line")
            Tracer.Visible = false 
            Tracer.Color = Color3.fromRGB(255,0,0)
            Tracer.Thickness = 1

        

        local Materials = {"ForceField","Neon","Plastic"}
        local bodyParts = {}
            
        for i,v in pairs(lp.Character:GetChildren()) do 
            if v:IsA("BasePart") then 
                table.insert(bodyParts,v.Name)
            end 
        end 



        --Clone(lp,Color3.fromRGB(255,255,255),"ForceField",0.5)
        
        local window = library:New({name = Cheat_Name, size = Vector2.new(554, 629), Accent = Default_Accent})
        window:NotificationList({})
        
        local combat_page = window:Page({name = "Combat", size = 104}) do
            local lock,aim_assist,aimbot_settings = combat_page:MultiSection({sections = {"Lock","Aim Assist","Settings"}, side = "Left", Size = 450,fill = true})
            
            getgenv().HitChams = Instance.new("Folder")
            HitChams.Parent = ws
            --// Lock 
            do                 
                lock:Toggle({name = "Enabled", pointer = 'lock_enabled'}):Keybind({name = "Locking", pointer = 'lock_key', mode = "Toggle",callback = function(a) 
                    if pointers["lock_enabled"]:get() and pointers["lock_type"]:get() == "Lock" then 
                        if pointers["lock_key"]:is_active() then 
                            getgenv().Target = getClosestPlayerToCursor(math.huge) 
                            window.notificationlist:AddNotification({text = "Locked onto:" .. getgenv().Target.Name .."!",lifetime = 2})
                            
                            if pointers["target_strafe"]:get() then 
                                getgenv().Bypass = true 
                            end 

                            if pointers["view_target"]:get() then 
                                CC.CameraSubject = getgenv().Target.Character.Humanoid
                            end 

                            if pointers["part_chams"]:get() then 
                                Clone(Target,pointers["part_chams_color"]:get().Color,pointers["part_chams_material"]:get(),pointers["part_chams_color"]:get().Transparency)
                            end
                    
                            if Target ~= nil and pointers["lock_enabled"]:get() and pointers["lock_key"]:is_active() and Target and Target.Character and Target.Character.Humanoid and Target.Character.Humanoid.Health > 0 and pointers["target_stats"]:get() then 
                                local pImageData = game:GetService("HttpService"):JSONDecode(game:HttpGet(("https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds=%s&size=352x352&format=Png&isCircular=false"):format(Target.UserId)))
                                local imagedata  = game:HttpGet((pImageData["data"][1]["imageUrl"]))
                                Sliders["Health"]:SetVisible(true)
                                TargetDrawing.Data = imagedata
                                Title.Text = "".. Target.DisplayName .." [" .. Target.Name .."]"
                            end 

                            local currentHealth = Target.Character:WaitForChild("Humanoid").Health
                            getgenv().TargetHealthLoop = Target.Character:WaitForChild("Humanoid").HealthChanged:Connect(function(newHealth)
                                if newHealth < currentHealth then 
                                    if pointers["hit_chams"]:get() and Target ~= nil then 
                                        for i,v in pairs(Target.Character:GetChildren()) do 
                                            if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" and v.Name ~= "LaserArm" then 
                                                local ClonedPart = Instance.new("Part")
                                                ClonedPart.Anchored = true 
                                                ClonedPart.CanCollide = false 
                                                ClonedPart.Position = v.Position
                                                ClonedPart.Parent = HitChams 
                                                ClonedPart.Material = Enum.Material.Plastic
                                                ClonedPart.Shape = Enum.PartType.Block 
                                                ClonedPart.Transparency = pointers["hit_chams_color"]:get().Transparency
                                                ClonedPart.Color = pointers["hit_chams_color"]:get().Color
                                                ClonedPart.Size = v.Size + Vector3.new(0.01,0.01,0.01)
                                                ClonedPart.Name = v.Name
                                                ClonedPart.Rotation = v.Rotation
                                            end 
                                        end
                                        delay(pointers["hit_chams_lifetime"]:get(),function()
                                            HitChams:ClearAllChildren()
                                        end)
                                    end

                                    if pointers["hit_logs"]:get() then 
                                        window.notificationlist:AddNotification({text = "Hit "..Target.Name.." For ".. floor(abs(newHealth-currentHealth)) .." Damage!",lifetime = 2})
                                    end 
                                end
                                currentHealth = newHealth
                            end)
                        else 
                            window.notificationlist:AddNotification({text = "Unlocked!",lifetime = 2})
                            if TargetHealthLoop then 
                                TargetHealthLoop:Disconnect()
                            end 
                            Sliders["Health"]:SetVisible(false)
                            lp.Character.Humanoid.AutoRotate = true 
                            TargetPart.CFrame = CFrame.new(9999,9999,9999)
                            CC.CameraSubject = lp.Character.Humanoid
                            ws.Terrain:ClearAllChildren() 
                            getgenv().Target = nil 
                            Tracer.Visible = false  
                            getgenv().Bypass = false 
                        end 
                    end 
                end}) 
                lock:Dropdown({name = "Type", pointer = 'lock_type', options = {"Lock","Silent Aim"},default = "Lock"})
                lock:Textbox({placeholder = "Prediction", middle = true, pointer = 'lock_prediction',default = "0.1413"})
                lock:Multibox({name = "Hitpart", pointer = 'hitpart', options = bodyParts,min = 1,max = 10})
                --sections:Multibox(info)
                lock:Toggle({name = "Target Stats", pointer = 'target_stats'})
                lock:Toggle({name = "Hit Chams", pointer = 'hit_chams'}):Colorpicker({pointer = 'hit_chams_color', default = Color3.fromRGB(255,255,255),Transparency = 0})
                lock:Slider({pointer = "hit_chams_lifetime", name = "Life Time", min = 0, max = 10, default = 5, decimals = 1})
                lock:Toggle({name = "Hit Logs", pointer = 'hit_logs'})
                lock:Slider({pointer = "hit_chance", name = "Hit Chance", min = 0, max = 100, default = 100, decimals = 1})
                lock:Slider({pointer = "jump_offset", name = "Jump Offset", min = -1, max = 1, default = -0.46, decimals = 0.01})
                lock:Toggle({name = "Resolver", pointer = 'resolver'}):Keybind({name = "Lock Resolver", pointer = 'resolver_keybind', mode = "Toggle"})
                lock:Toggle({name = "Look-At", pointer = 'look_at'})
                lock:Toggle({name = "View Target", pointer = 'view_target'})
                lock:Toggle({name = "Target Strafe", pointer ='target_strafe'})
                lock:Slider({name = "Speed", pointer ='strafe_speed', min = 0, max = 100, default = 10, decimals = 1})
                lock:Slider({name = "Radius", pointer ='strafe_radius', min = 1, max = 50, default = 10, decimals = 1})
                lock:Slider({name = "Height", pointer ='strafe_height', min = 0, max = 20, default = 0, decimals = 1})
            end  


            
            --// Aim Assist
            do 
                aim_assist:Toggle({name = "Enabled", pointer ='aim_assist_enabled'}):Keybind({name = "Aim Assist", keybind_name = "Aim Assist", pointer ='aim_assist_key', mode = "Toggle",callback = function(a)
                    if pointers["aim_assist_enabled"]:get() and pointers["aim_assist_key"]:is_active() then 
                        getgenv().CTarget = getClosestPlayerToCursor(math.huge)
                    else 
                        getgenv().CTarget = nil 
                    end 
                end})
                aim_assist:Textbox({name = "Prediction", middle = true, pointer ='aim_assist_prediction',placeholder = "0.1413"})
                aim_assist:Slider({name = "Horizontal Smoothing", pointer ='x_smoothing', min = 0, max = 100, default = 5, callback = function(a)
                end})
                aim_assist:Slider({name = "Vertical Smoothing", pointer ='y_smoothing', min = 0, max = 100, default = 5, decimals = 0.1})
                aim_assist:Dropdown({name = "Hitpart", pointer ='aim_assist_hitbox', options = bodyParts, default = 'HumanoidRootPart',max = 10})
                aim_assist:Toggle({name = "Aim Assist Resolver", pointer ='aim_assist_resolver'}):Keybind({name = "Aim Assist Resolver", pointer ='aim_assist_resolver_keybind', mode = "Toggle"})
            end 
            
            
            --// Settings
            do 
                aimbot_settings:Multibox({name = "Checks", pointer = "checks", options = {"Wall Check", "Knock Check"}, default = {},min = 0,callback = function()
                end})

                --aimbot_settings:Label({name = "FOV",middle = true,pointer = "label9823749823"})
                aimbot_settings:Toggle({name = "Render Field Of View", pointer = 'lock_render_field_of_view',callback = function(a)
                    Lock.Visible = pointers["lock_render_field_of_view"]:get()
                end}):Colorpicker({pointer = 'lock_fov_color', default = Color3.fromRGB(255,255,255),Transparency = 0,callback = function(a)
                    Lock.Color = pointers["lock_fov_color"]:get().Color
                    Lock.Transparency = 1 - pointers["lock_fov_color"]:get().Transparency
                end})
                aimbot_settings:Toggle({name = "Render Outline", pointer = 'lock_render_outline',callback = function(a)
                    LockOutline.Visible = pointers["lock_render_outline"]:get()
                end}):Colorpicker({pointer = 'lock_outline_color', default = Color3.fromRGB(0,0,0),Transparency = 0,callback = function(a)
                    LockOutline.Color = pointers["lock_outline_color"]:get().Color
                    LockOutline.Transparency = 1 - pointers["lock_outline_color"]:get().Transparency
                end})
                aimbot_settings:Toggle({name = "Filled", pointer = 'lock_render_fill',callback = function(a)
                    Lock.Filled = pointers["lock_render_fill"]:get()
                end})
                aimbot_settings:Slider({name = "Radius (°)", pointer = 'lock_radius', min = 0, max = 1000, default = 100, decimals = 1,callback = function(a)
                    Lock.Radius = a
                    LockOutline.Radius = a
                end})
                aimbot_settings:Slider({name = "Sides", pointer = 'lock_fov_sides', min = 0, max = 20, default = 0, decimals = 1,callback = function(a)
                    Lock.NumSides = a
                    LockOutline.NumSides = a
                end})
            end 
            

            --// Visualization
            local Part_Section,Drawing_Section = combat_page:MultiSection({sections = {"Part","Drawing"}, side = "Right", Size = 235,fill = false}) do 
                Part_Section:Toggle({name = "Enabled", pointer ='part_enabled'}):Colorpicker({pointer ='part_color',Transparency = 0,default = Color3.fromRGB(255,0,0),callback = function(a)
                    TargetPart.Color = pointers["part_color"]:get().Color
                    TargetPart.Transparency = (pointers["part_color"]:get().Transparency)
                end})
                --
                Part_Section:Dropdown({name = "configs", pointer = 'part_configs', options = {'custom','hitbox',"bubble"}, default = 'custom',callback = function(a)
                    if pointers["part_configs"]:get() == "hitbox" then 
                        TargetPart.Size = Vector3.new(lp.Character.HumanoidRootPart.Size.X * 3 ,5,lp.Character.HumanoidRootPart.Size.X * 3)
                    elseif pointers["part_configs"]:get() == "bubble" then 
                        TargetPart.Shape = Enum.PartType.Ball
                        TargetPart.Material = Enum.Material.ForceField
                    elseif pointers["part_configs"]:get() == "custom" then 
                        TargetPart.Size = Vector3.new(pointers["part_size"]:get(),pointers["part_size"]:get(),pointers["part_size"]:get())
                        TargetPart.Material = Enum.Material[pointers["part_material"]:get()]
                        TargetPart.Color = pointers["part_color"]:get().Color
                        TargetPart.Transparency = (pointers["part_color"]:get().Transparency)
                    end 
                end})
                --
                Part_Section:Dropdown({name = "Material", pointer ='part_material', options = {'ForceField','Neon',"Plastic"}, default = 'ForceField',callback = function(a)
                    TargetPart.Material = Enum.Material[pointers["part_material"]:get()]
                end})
                --
                Part_Section:Toggle({name = "Visualize Velocity", pointer ='part_velocity_enabled'})
                --  
                Part_Section:Slider({name = "Size", pointer ="part_size", min = 0, max = 100, default = 100, decimal = 1,callback = function(a)
                    if pointers["part_configs"]:get() == "custom" then 
                        TargetPart.Size = Vector3.new(a,a,a)
                    end 
                end})
                --
                Part_Section:Toggle({name = "Chams", pointer = 'part_chams',callback = function(a)
                end}):Colorpicker({pointer ='part_chams_color', default = Color3.fromRGB(255,0,0),transparency = 0})
                --
                Part_Section:Dropdown({name = "Material", pointer ='part_chams_material', options = {'ForceField','Neon',"Plastic"}, default = 'ForceField'})
                --
                Drawing_Section:Toggle({name = "Snap-Line", pointer = "snap_line",callback = function()
                end}):Colorpicker({pointer ='tracer_color',transparency = 0, default = Color3.fromRGB(255,0,0),callback = function(a)
                    Tracer.Color = pointers["tracer_color"]:get().Color
                    Tracer.Transparency = (1 -pointers["tracer_color"]:get().Transparency)
                end})
                --
                Drawing_Section:Slider({name = "thickness", pointer ='tracer_thickness', min = 0, max = 3, default = 1, decimal = 0.01,callback = function(a)
                    Tracer.Thickness = a
                end})
                
            end
        end 

        
        local visuals_page = window:Page({name = "Visuals", size = 103}) do
            local player_esp_section,setting_esp_section = visuals_page:MultiSection({sections = {"ESP","Settings"}, side = "Left", Size = 295}) do 
                
                player_esp_section:Toggle({pointer = "settings/menu/esp_enabled", name = "ESP Enabled", def = false})
                -- 
                player_esp_section:Slider({pointer = "settings/menu/esp_maxdistance", name = "ESP Max Distance", def = 7500, min = 0, max = 7500, decimals = 0.01})
                player_esp_section:Toggle({pointer = "settings/menu/esp_name", name = "Name", def= false})
                :Colorpicker({pointer = "settings/menu/esp_name_color", name = "Esp Name Colour",transparency = 0, default = Color3.fromRGB(255,255,255)})
                --
                local box = player_esp_section:Toggle({pointer = "settings/menu/esp_box", name = "Box", def = false})
                box:Colorpicker({pointer = "settings/menu/esp_box_color1", name = "Esp Box Color 1", transparency = 0,default = Color3.fromRGB(0,0,0)})
                box:Colorpicker({pointer = "settings/menu/esp_box_color2", name = "Esp Box Color 2",transparency = 0, default = Color3.fromRGB(192,0,2)})
                --
                player_esp_section:Toggle({pointer = "settings/menu/esp_boxfill", name = "Box Fill", def = false})
                :Colorpicker({pointer = "settings/menu/esp_boxfill_color", name = "Box Fill Color", transparency = 0.5, default = Color3.fromRGB(255,255,255)})
                --
                healthbar = player_esp_section:Toggle({pointer = "settings/menu/esp_healthbar", name = "Health Bar", def = false})
                healthbar:Colorpicker({pointer = "settings/menu/esp_healthbar_color1", name = "Show Inventory Accent", transparency = 0, default = Color3.fromRGB(33,251,24)})
                healthbar:Colorpicker({pointer = "settings/menu/esp_healthbar_color2", name = "Show Inventory Accent", transparency = 0, default = Color3.fromRGB(190,0,2)})
                --
                local Health_Number = player_esp_section:Toggle({pointer = "settings/menu/esp_healthtext", name = "Health Number", def = false})
                Health_Number:Colorpicker({pointer = "settings/menu/esp_healthtext_color1", name = "color1", transparency = 0, default = Color3.fromRGB(33,251,24)})
                Health_Number:Colorpicker({pointer = "settings/menu/esp_healthtext_color2", name = "color2", transparency = 0, default = Color3.fromRGB(190,0,2)})
                --
                local OffScreen_Arrows = player_esp_section:Toggle({pointer = "settings/menu/esp_arrow", name = "Offscreen Arrows", def = false})
                OffScreen_Arrows:Colorpicker({pointer = "settings/menu/esp_arrow_color", name = "Arrow Color", transparency = 0, default = Color3.fromRGB(255,255,255)})
                OffScreen_Arrows:Colorpicker({pointer = "settings/menu/esp_arrow_color_outline", name = "Arrow Outline Color", transparency = 0, default = Color3.fromRGB(0,0,0)})
                --
                setting_esp_section:Toggle({pointer = "settings/menu/esp_arrow_pulse", name = "Arrow Pulse", def = false})
                --
                setting_esp_section:Slider({pointer = "settings/menu/esp_arrow_size", name = "Arrow Size", def = 12, min = 0, max = 35, decimals = 0.01})
                --
                setting_esp_section:Slider({pointer = "settings/menu/esp_arrow_position", name = "Arrow Radius", def = 0, min = 200, max = 800, decimals = 0.01})
                --
                setting_esp_section:Slider({pointer = "settings/menu/esp_arrow_pulse_speed", name = "Arrow Pulse Speed", def = 5, min = 0, max = 15, decimals = 0.01})
                --
                player_esp_section:Multibox({Name = "Arrow Flags", Minimum = 0, Options = {"Distance", "Health"}, Pointer = "settings/menu/esp_arrow_flag_type"})
                --
                player_esp_section:Toggle({pointer = "settings/menu/esp_weapon", name = "Weapon", def = false})
                :Colorpicker({pointer = "settings/menu/esp_weapon_color", name = "Weapon Color", default = Color3.fromRGB(255, 255, 255)})
                --
                player_esp_section:Toggle({pointer = "settings/menu/esp_distance", name = "Distance", def = false})
                :Colorpicker({pointer = "settings/menu/esp_distance_color", name = "Distance Color", default = Color3.fromRGB(255, 255, 255)})
                --
                player_esp_section:Toggle({pointer = "settings/menu/esp_tracer", name = "Tracer", def = false})
                :Colorpicker({pointer = "settings/menu/esp_tracer_color", name = "Tracer Color",transparency = 0, default = Color3.fromRGB(255, 255, 255)})
                -- 
                setting_esp_section:Dropdown({name = "Tracer Origin",options = {"Top","Mouse","Bottom"}, pointer = "settings/menu/esp_tracer_origin"})
                --
                setting_esp_section:Toggle({pointer = "settings/menu/esp_highlight_target", name = "Highlight Target", def = false}):Colorpicker({pointer = "settings/menu/esp_hightlight_target_color", name = "Enemy Color", default = Color3.fromRGB(200, 55, 55)})
                --
                setting_esp_section:Dropdown({name = "ESP Font",options = {"UI","Plex","Monospace","System"}, pointer = "settings/menu/font",default = "Plex"})
                --
                setting_esp_section:Slider({pointer = "settings/menu/font_size", name = "Font Size", def = 13, min = 0, max = 50, decimals = 1})
                --pointers["settings/menu/font_size"]:set(13)
                --
                loadstring(game:HttpGet("https://hvh.wtf/p/raw/osiris/ca2w6qvj0v"))()

            local world_section,camera_section,cursor_section = visuals_page:MultiSection({sections = {"World","Camera","Cursor"}, side = "Right", Size = 450}) do 
                    local Ambient = world_section:Toggle({pointer = "settings/menu/visuals_custom_ambient",name = "Custom Ambient", def = false})
                    Ambient:Colorpicker({pointer = "settings/menu/visuals_ambient",name = "Ambient Color",default = Color3.fromRGB(255,255,255)}) 
                    Ambient:Colorpicker({pointer = "settings/menu/visuals_outdoor_ambient",name = "Ambient Color",default = Color3.fromRGB(255,255,255)}) 
                    --
                    world_section:Toggle({pointer = "settings/menu/visuals_custom_color_shift", name = "Custom Color Shift", def = false }):Colorpicker({pointer = "settings/menu/visuals_custom_color_shift_top",name = "Ambient Color",default = Color3.fromRGB(255,255,255)}) 
                    --
                    world_section:Toggle({pointer = "settings/menu/visuals_custom_shadows", name = "Global Shadows", def = true }):Colorpicker({pointer = "settings/menu/visuals_custom_shadows_color",name = "Shadows Color",default = Color3.fromRGB(170,170,170)})
                    world_section:Slider({pointer = "settings/menu/visuals_custom_shadows_softness", name = "Shadow Softness: ", def = 0.65,min = 0, max = 1, prefix = "%",decimals = 0.01})
                    --
                    world_section:Toggle({pointer = "settings/menu/visuals_custom_brightness", name = "Custom Brightness", def = false })
                    world_section:Slider({pointer = "settings/menu/visuals_custom_brightness_number", name = "Brightness: ", def = 1,min = 0, max = 5, decimals = 0.1})
                    --
                    world_section:Toggle({pointer = "settings/menu/visuals_custom_exposure", name = "Custom Exposure", def = false })
                    world_section:Slider({pointer = "settings/menu/visuals_custom_exposure_number", name = "Exposure: ", def = 1, min = -5, max = 5, decimals = 0.01})
                    --
                    world_section:Toggle({pointer = "settings/menu/visuals_custom_clock_time", name = "Custom Clock Time", def = false })
                    world_section:Slider({pointer = "settings/menu/visuals_custom_clock_time_number", name = "Clock Time: ", def = 0, min = 0.1, max = 24, prefix = "hr",decimals = 0.1})
                    world_section:Dropdown({pointer = "settings/menu/visuals_custom_technology",name = "Custom Technology",options = {"Future", "ShadowMap", "Compatibility", "Voxel"},def = "Voxel",callback = function(s) sethiddenproperty(Lighting, "Technology", s) end})
                    --
                    world_section:Toggle({pointer = "settings/menu/visuals_fog", name = "Fog", def = false }):Colorpicker({pointer = "settings/menu/visuals_fog_color",name = "Fog Color",default = Color3.fromRGB(255,255,255)})
                    world_section:Slider({pointer = "settings/menu/visuals_fog_start", name = "Fog Start: ", def = 750, min = 0, max = 5000, decimals = 0.1})
                    world_section:Slider({pointer = "settings/menu/visuals_fog_end", name = "Fog End: ", def = 750, min = 0, max = 5000, decimals = 0.1})
                    --
                    world_section:Toggle({pointer = "settings/menu/disable_rendering", name = "Disable Rendering", def = false,function()
                        Run:Set3dRenderingEnabled(not pointers["settings/menu/disable_rendering"]:get())
                    end})
                    --
                    world_section:Button({name = "Reset", confirmation = true, callback = function()
                        for i,v in pairs(oldLighting) do 
                            Lighting[i] = v 
                        end 
                    end})

                    camera_section:Toggle({pointer = "settings/menu/visuals_custom_fov", name = "Custom Field Of View",def = false})
                    --
                    camera_section:Slider({pointer = "settings/menu/visuals_custom_fov_number", name = "Field Of View: ", def = 90, min = 0, max = 120, decimals = 0.1})
                    --        
                    camera_section:Toggle({pointer = "settings/menu/visuals_aspect", name = "Aspect Ratio", def = false})
                    --
                    camera_section:Slider({pointer = "settings/menu/visuals_aspect_ratio_x", name = "Amount:", def = 50, min = 0, max = 100, decimals = 0.1})
                    
                    local other_visuals = visuals_page:Section({name = "Other", side = "Left",Size = 295,Fill = true})
                    --
                    getgenv().Beam1 = Color3.fromRGB(255,255,255)
                    getgenv().Beam2 = Color3.fromRGB(255,255,255) 
                    local BT = other_visuals:Toggle({pointer = "bullet_tracers", name = "Bullet Tracers", def = false})
                    BT:Colorpicker({pointer = "bullet_tracers_color",name = "Bullet Tracers Color",default = Color3.fromRGB(255,255,255),callback = function()
                        getgenv().Beam1 = pointers["bullet_tracers_color"]:get().Color
                    end}) 
                    BT:Colorpicker({pointer = "bullet_tracers_color_2",name = "Bullet Tracers Color 2",default = Color3.fromRGB(255,255,255),callback = function()
                        getgenv().Beam2 = pointers["bullet_tracers_color_2"]:get().Color
                    end}) 
                    --
                    other_visuals:Dropdown({name = "Textures", pointer ='bullet_tracer_texture', options = {'Lightning','Laser 1',"Laser 2","Energy","Laser"}, default = 'Lightning'})
                    --
                    local RainbowBullets = other_visuals:Toggle({pointer = "bullet_tracers_rainbow", name = "Rainbow Bullet Tracers", def = false})
                    --
                    other_visuals:Toggle({pointer = "body_enabled", name = "Body Material", def = false}):Colorpicker({pointer = "body_color",name = "Body Color",default = Color3.fromRGB(255,255,255)}) 
                    -- 
                    other_visuals:Toggle({pointer = "gun_enabled", name = "Gun Material", def = false}):Colorpicker({pointer = "gun_color",name = "Gun Color",default = Color3.fromRGB(255,255,255)}) 
                    --
                    other_visuals:Toggle({pointer = "custom_gun_sfx", name = "Custom Gun Sounds", def = false})
                    --
                    getgenv().sfx = {
                    ["Bameware"] = "3124331820",
                    ["Skeet"] = "4753603610",
                    ["Bonk"] = "3765689841",
                    ["Lazer Beam"] = "130791043",
                    ["Windows XP Error"] = "160715357",
                    ["TF2 Hitsound"] = "3455144981",
                    ["TF2 Critical"] = "296102734",
                    ["TF2 Bat"] = "3333907347",
                    ['Bow Hit'] = "1053296915",
                    ['Bow'] = "3442683707",
                    ['OSU'] = "7147454322",
                    ['Minecraft Hit'] = "4018616850",
                    ['Steve'] = "5869422451",
                    ['1nn'] = "7349055654",
                    ['Rust'] = "3744371091",
                    ["TF2 Pan"] = "3431749479",
                    ["Neverlose"] = "8679627751",
                    ["Mario"] = "5709456554",
                }   

                    sfxnames = {}

                    for i,v in next, sfx do 
                        table.insert(sfxnames,i)
                    end 


                    other_visuals:Dropdown({name = "Sound", pointer ='Sound',max = 5, options = sfxnames, default = 'Bonk'})

                    do 
                        for _,v in next, Cursor do 
                            v.Thickness = 2
                        end 
        
                        for _,v in next, Outlines do 
                            v.Thickness = 4.5
                        end 
        
                        for _,v in next, Outlines do 
                            v.Color = Color3.new(0,0,0)
                        end 
        
                        local CustomCursor = cursor_section:Toggle({name = "Enabled", pointer ='custom_cursor',callback = function()
                            for i,v in pairs(Cursor) do 
                                v.Visible = pointers["custom_cursor"]:get()
                            end

                            game:GetService("UserInputService").OverrideMouseIconBehavior = Enum.OverrideMouseIconBehavior.ForceShow
        
                            for i,v in pairs(Outlines) do 
                                v.Visible = pointers["custom_cursor"]:get()
                            end
                            
                        end})
                        CustomCursor:Colorpicker({name = "Cursor Color",pointer ='custom_cursor_color', default = Color3.fromRGB(255,255,255),callback = function()
                            for _,v in next, Cursor do 
                                v.Color = pointers["custom_cursor_color"]:get().Color
                            end 
                        end})        

        
                        cursor_section:Slider({name = "Size", max = 25, min = 0, default = 10, pointer ='cursor_size', decimals = 1}); -- pointers["cursor_size"]
                        cursor_section:Slider({name = "Gap", max = 25, min = 0, default = 1, pointer ='cursor_gap', decimals = 1});
                        cursor_section:Toggle({name = "Spin", pointer ='spinning_cursor'})
                        cursor_section:Slider({name = "Speed", max = 360, min = 0, default = 45, pointer ='spin_speed', decimals = 1});
                        cursor_section:Toggle({name = "Dynamic Spin", pointer ='dynamic_spin'})
                        cursor_section:Toggle({name = "Dynamic Gap", pointer ='sine_animation'})
                        cursor_section:Slider({name = "Speed", max = 2, min = 0, default = 1, pointer ='sine_animation_speed', decimals = 0.01});
                        cursor_section:Slider({name = "Offset", max = 2, min = -2, default = 0, pointer ='sine_animation_offset', decimals = 0.01});
                    end
                end 
            end 
        end

        local misc_page = window:Page({name = "Misc", size = 103}) 
        do 
            do 
                local movement_section,disablers_section,autobuys_section = misc_page:MultiSection({sections = {"Movement","Disablers","Auto Buys"}, side = "Left", Size = 240,fill = false})
                movement_section:Toggle({pointer = "speed", name = "CFrame Speed", def = false}):Keybind({name = "Speed", pointer = 'speed_key', mode = "Toggle"})
                movement_section:Slider({pointer = "speed_power", name = "Speed: ", def = 30, min = 0, max = 100, decimals = 1})
                movement_section:Toggle({pointer = "auto_jump", name = "Auto Jump", def = false})
                movement_section:Toggle({pointer = "fly", name = "Fly", def = false,callback = function()
                    lp.Character.HumanoidRootPart.Anchored = false 
                end}):Keybind({name = "Fly", pointer = 'fly_key', mode = "Toggle",callback = function()
                    lp.Character.HumanoidRootPart.Anchored = false 
                end})
                movement_section:Slider({pointer = "fly_speed", name = "Fly Speed: ", def = 100, min = 0, max = 200, decimals = 1})
                movement_section:Toggle({pointer = "spin", name = "Spin", def = false,callback = function()
                    lp.Character.Humanoid.AutoRotate = true 
                end}):Keybind({name = "Spin", pointer = 'spin_key', mode = "Toggle",callback = function()
                    lp.Character.Humanoid.AutoRotate = true 
                end})
                movement_section:Slider({pointer = "spin_power", name = "Spin Power: ", def = 2, min = 0, max = 20, decimals = 0.1})
                movement_section:Toggle({pointer = "jitter", name = "Jitter", def = false,callback = function()
                    lp.Character.Humanoid.AutoRotate = true 
                end}):Keybind({name = "Jitter", pointer = 'jitter_key', mode = "Toggle",callback = function()
                    lp.Character.Humanoid.AutoRotate = true 
                end})
    
                movement_section:Toggle({pointer = "macro_toggle", name = "Macro", def = false,callback = function()
                end}):Keybind({name = "Macro", pointer = 'macro_key', mode = "Hold",callback = function()
                end})
    
                spawn(function()
                    while true do  
                        Run.Heartbeat:wait()
                        if pointers["bullet_tracers_rainbow"]:get() then 
                            local Color1 = Color3.fromHSV(abs(sin(tick()) / 1),1,1)
                            local Color2 = Color3.fromHSV(abs(sin(tick()) / 1.5),1,1)
                            getgenv().Beam1  = Color1 
                            getgenv().Beam2  = Color2
                        end 

                        if pointers["macro_toggle"]:get() == true and pointers["macro_key"]:is_active() == true then 
                            keypress(0x49)
                            Run.Heartbeat:wait()
                            keypress(0x4F)
                            Run.Heartbeat:wait()
                            keyrelease(0x49)
                            Run.Heartbeat:wait()
                            keyrelease(0x4F)
                            Run.Heartbeat:wait()
                        end 
                    end 
                end)
                disablers_section:Toggle({pointer = "anti_stomp", name = "Anti Stomp", def = false})
                disablers_section:Toggle({pointer = "auto_reload", name = "Auto Reload", def = false})
                disablers_section:Toggle({pointer = "fast_db", name = "Fast DB", def = false})
                disablers_section:Toggle({pointer = "auto_stomp", name = "Auto Stomp", def = false})
                disablers_section:Toggle({pointer = "anti_jump_cooldown", name = "Remove Jump Cooldown", def = false})
                disablers_section:Toggle({pointer = "kill_aura", name = "Kill Aura", def = false}):Keybind({name = "Kill Aura", pointer ='kill_aura_key', mode = "Toggle"})
                disablers_section:Toggle({pointer = "stomp_aura", name = "Stomp Aura", def = false}):Keybind({name = "Stomp Aura", pointer ='stomp_aura_key', mode = "Toggle"})
                disablers_section:Toggle({pointer = "remove_chairs", name = "Remove Chairs", def = false,callback = function()
                    for i,v in pairs(ws:GetDescendants()) do 
                        if v:IsA("Seat") then 
                            v.Disabled = pointers["remove_chairs"]:get() 
                        end 
                    end 
                end})
                disablers_section:Toggle({pointer = "remove_zoom_limit", name = "Remove Zoom Limit", def = false,callback = function()
                    if pointers["remove_zoom_limit"]:get() then 
                        lp.CameraMaxZoomDistance = math.huge
                    else 
                        lp.CameraMaxZoomDistance = 25
                    end 
                end})
    
                local GunBuys = {}
                --
                for i,v in pairs(game:GetService("Workspace").Ignored.Shop.Guns:GetChildren()) do 
                    if v:IsA("Model") then 
                        table.insert(GunBuys, v.Name)
                    end 
                end 
                --
                autobuys_section:Dropdown({name = "Buy Gun", pointer ='Auto-Buy', options = GunBuys,default = ""})
                --
                autobuys_section:ButtonHolder({Buttons = 
                {{"Buy Gun", function() 
                    if pointers["Auto-Buy"]:get() then 
                        local OldPosition = lp.Character.HumanoidRootPart.CFrame
                        getgenv().Bypass = true 
                        wait(0.25)
                        lp.Character.HumanoidRootPart.CFrame = ws.Ignored.Shop.Guns[pointers["Auto-Buy"]:get()].Head.CFrame
                        wait(1)
                        fireclickdetector(ws.Ignored.Shop.Guns[pointers["Auto-Buy"]:get()].ClickDetector)
                        fireclickdetector(ws.Ignored.Shop.Guns[pointers["Auto-Buy"]:get()].ClickDetector)
                        fireclickdetector(ws.Ignored.Shop.Guns[pointers["Auto-Buy"]:get()].ClickDetector)
                        fireclickdetector(ws.Ignored.Shop.Guns[pointers["Auto-Buy"]:get()].ClickDetector)
                        fireclickdetector(ws.Ignored.Shop.Guns[pointers["Auto-Buy"]:get()].ClickDetector)
                        fireclickdetector(ws.Ignored.Shop.Guns[pointers["Auto-Buy"]:get()].ClickDetector)
                        wait(1)
                        lp.Character.HumanoidRootPart.CFrame = OldPosition
                        wait(0.5)
                        getgenv().Bypass = false  
                    end
                end}
                , {"Buy Armor", function() 
                    local ArmorPath = game:GetService("Workspace").Ignored.Shop.Armor["[High-Medium Armor] - $550"]
                    local OldPosition = lp.Character.HumanoidRootPart.CFrame
                    getgenv().Bypass = true 
                    wait(0.25)
                    lp.Character.HumanoidRootPart.CFrame = ArmorPath.Head.CFrame
                    wait(1)
                    fireclickdetector(ArmorPath.ClickDetector)
                    fireclickdetector(ArmorPath.ClickDetector)
                    fireclickdetector(ArmorPath.ClickDetector)
                    fireclickdetector(ArmorPath.ClickDetector)
                    fireclickdetector(ArmorPath.ClickDetector)
                    fireclickdetector(ArmorPath.ClickDetector)
                    wait(1)
                    lp.Character.HumanoidRootPart.CFrame = OldPosition
                    wait(0.5)
                    getgenv().Bypass = false  
                end}}})
            end 

            do 
                local cframe_section,velocity_section,network_section = misc_page:MultiSection({sections = {"Client","Anti-Lock","Network"}, side = "Right", Size = 450,fill = true}) do 
                    getgenv().Visualizecframe = game:GetObjects("rbxassetid://8246626421")[1]
                    Visualizecframe.Humanoid:Destroy()
                    Visualizecframe.Head.Face:Destroy()
                    Visualizecframe.Parent = game.Workspace
                    Visualizecframe.HumanoidRootPart.Velocity = Vector3.new()
                    Visualizecframe.HumanoidRootPart.CFrame = CFrame.new(9999,9999,9999)
                    Visualizecframe.HumanoidRootPart.Transparency = 1 
                    Visualizecframe.HumanoidRootPart.CanCollide = false 

                    getgenv().Visualizevelocity = game:GetObjects("rbxassetid://8246626421")[1]
                    Visualizevelocity.Humanoid:Destroy()
                    Visualizevelocity.Head.Face:Destroy()
                    Visualizevelocity.Parent = game.Workspace
                    Visualizevelocity.HumanoidRootPart.Velocity = Vector3.new()
                    Visualizevelocity.HumanoidRootPart.CFrame = CFrame.new(9999,9999,9999)
                    Visualizevelocity.HumanoidRootPart.Transparency = 1 
            
                    for i,v in pairs(Visualizecframe:GetChildren()) do 
                        if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then 
                            v.CanCollide = false 
                            v.Transparency = 0.8
                        end 
                    end 
            
                    for i,v in pairs(Visualizevelocity:GetChildren()) do 
                        if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then 
                            v.CanCollide = false 
                            v.Transparency = 0.8
                        end 
                    end 
            
                    local function VisualizerColorCFrame(Color,Transparency)
                        for i,v in next, Visualizecframe:GetChildren() do 
                            if v.Name ~= "HumanoidRootPart" and v:IsA("BasePart") then 
                                v.Color = Color
                                v.Transparency = Transparency
                            end 
                        end
                    end 
            
                    local function VisualizerColorVelocity(Color,Transparency)
                        for i,v in next, Visualizevelocity:GetChildren() do 
                            if v.Name ~= "HumanoidRootPart" and v:IsA("BasePart") then 
                                v.Color = Color
                                v.Transparency = Transparency
                            end 
                        end
                    end 
            
                    Visualizevelocity.HumanoidRootPart.Transparency = 1 
            
                    VisualizerColorCFrame(Color3.new(1,1,1),0.5)
                    

                    cframe_section:Toggle({name = "Enabled", pointer ='cframe_desync',callback = function(a)                    
                        if pointers["visualize_cframe"]:get() and pointers["cframe_desync"]:get() then 
                            VisualizerColorCFrame(pointers["visualize_cframe_color"]:get().Color, pointers["visualize_cframe_color"]:get().Transparency)    
                        else 
                            VisualizerColorCFrame(pointers["visualize_cframe_color"]:get().Color, 1) 
                        end 

                        if getgenv().OldPosition then 
                            lp.Character.HumanoidRootPart.CFrame = getgenv().OldPosition
                        end 
                    end}):Keybind({name = "Desync Key", pointer ='cframe_desync_key', mode = "Toggle",default = Enum.KeyCode.X, callback = function() 
                        if pointers["cframe_desync_key"]:is_active() and pointers["cframe_desync"]:get() and pointers["visualize_cframe"]:get() then 
                            VisualizerColorCFrame(pointers["visualize_cframe_color"]:get().Color, pointers["visualize_cframe_color"]:get().Transparency)    
                        else 
                            VisualizerColorCFrame(pointers["visualize_cframe_color"]:get().Color, 1) 
                        end 

                        if getgenv().OldPosition and pointers["cframe_desync"]:get() then 
                            lp.Character.HumanoidRootPart.CFrame = getgenv().OldPosition
                        end
                    end})

                    cframe_section:Toggle({name = "Visualize", pointer ='visualize_cframe',callback = function(a)
                        if a then 
                            VisualizerColorCFrame(pointers["visualize_cframe_color"]:get().Color, pointers["visualize_cframe_color"]:get().Transparency)
                        else 
                            VisualizerColorCFrame(pointers["visualize_cframe_color"]:get().Color, 1)    
                        end 
                    end}):Colorpicker({pointer ='visualize_cframe_color', default = Color3.new(1,1,1),Transparency = 0,callback = function(a)
                        if pointers["visualize_cframe"]:get() then 
                            VisualizerColorCFrame(pointers["visualize_cframe_color"]:get().Color, pointers["visualize_cframe_color"]:get().Transparency)   
                        end 
                    end}); 
                    cframe_section:Dropdown({name = "material", pointer ='visualize_material', options = {'ForceField','Neon',"Plastic"}, default = 'ForceField',callback = function(a)
                        for i,v in pairs(Visualizecframe:GetChildren()) do 
                            if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then 
                                v.Material = Enum.Material[a] 
                                v.Transparency = 0.8
                            end 
                        end 
                    end})
                    

                    cframe_section:Dropdown({name = "Type", pointer ='CFrame_Type', options = {"Nothing", "Random", "Floor Plant", "Upside Down","Sine"}, default = 'Nothing'})
                    cframe_section:Toggle({name = "Custom Positioning", pointer ='custom_cframe', state = true});
                    cframe_section:Slider({name = "X", max = 50, min = -50, default = 0, pointer ='CFrame_X', decimal = 1}) 
                    cframe_section:Slider({name = "Y", max = 50, min = -50, default = 0, pointer ='CFrame_Y', decimal = 1}) 
                    cframe_section:Slider({name = "Z", max = 50, min = -50, default = 0, pointer ='CFrame_Z', decimal = 1}) 
                    cframe_section:Slider({name = "Pitch", max = 180, min = -180, default = 0, pointer ='pitch', decimal = 1}) 
                    cframe_section:Slider({name = "Yaw", max = 180, min = -180, default = 0, pointer ='yaw', decimal = 1}) 
                    cframe_section:Slider({name = "Roll", max = 180, min = -180, default = 0, pointer ='roll', decimal = 1}) 
                    cframe_section:Slider({name = "Sine Speed", max = 5, min = 1, default = 1, pointer ='sine_speed', decimal = 0.1}) 
                    cframe_section:Slider({name = "Random Teleport Range", max = 50, min = 0, default = 0, pointer ='random_range', decimal = 1}) 
                
                    for i,v in pairs(Visualizevelocity:GetChildren()) do 
                        if v:IsA("BasePart") then 
                            v.CanCollide = false 
                        end 
                    end 
                    
                    Visualizevelocity.HumanoidRootPart.Transparency = 1 
                    getgenv().VisualizeTransparency = 0 
                    getgenv().VisualizeColor  = Color3.fromRGB(255,255,255)
                    getgenv().VisualizeDesync = false 

                    --VisualizerColorVelocity(getgenv().VisualizeColor, getgenv().VisualizeTransparency) 
                    velocity_section:Toggle({name = "Enabled", pointer = 'velocity_desync',callback = function(a)
                        if getgenv().VisualizeDesync and pointers["velocity_desync"]:get() then 
                            for i,v in next, Visualizevelocity:GetChildren() do 
                                if v.Name ~= "HumanoidRootPart" and v:IsA("BasePart") then 
                                    v.Color = getgenv().VisualizeColor
                                    v.Transparency = getgenv().VisualizeTransparency
                                end 
                            end    
                        else 
                            for i,v in next, Visualizevelocity:GetChildren() do 
                                if v.Name ~= "HumanoidRootPart" and v:IsA("BasePart") then 
                                    v.Color = getgenv().VisualizeColor
                                    v.Transparency = 1
                                end 
                            end    
                            Visualizevelocity.HumanoidRootPart.Transparency = 1 
                        end 

                        if getgenv().OldVelocity then 
                            lp.Character.HumanoidRootPart.Velocity = getgenv().OldVelocity
                        end 
                        lp.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0)

                    end}):Keybind({name = "Velocity Desync Keybind", pointer = 'velocity_desync_key', mode = "Toggle", ignore = false,keybind_name = "Anti Lock",default = Enum.KeyCode.X, callback = function()
                        if pointers["visualize_velocity"]:get() and pointers["velocity_desync"]:get() and pointers["velocity_desync_key"]:is_active()  then 
                            for i,v in next, Visualizevelocity:GetChildren() do 
                                if v.Name ~= "HumanoidRootPart" and v:IsA("BasePart") then 
                                    v.Color = getgenv().VisualizeColor
                                    v.Transparency = getgenv().VisualizeTransparency
                                end 
                            end    
                        else 
                            for i,v in next, Visualizevelocity:GetChildren() do 
                                if v.Name ~= "HumanoidRootPart" and v:IsA("BasePart") then 
                                    v.Color = getgenv().VisualizeColor
                                    v.Transparency = 1
                                end 
                            end    
                            Visualizevelocity.HumanoidRootPart.Transparency = 1 
                        end 
                        

                        if getgenv().OldVelocity then 
                            lp.Character.HumanoidRootPart.Velocity = getgenv().OldVelocity
                        end 
                        
                    end})


                    velocity_section:Toggle({name = "Visualize", pointer = 'visualize_velocity',callback = function(a)
                        getgenv().VisualizeDesync = pointers["visualize_velocity"]:get()
                        if a then 
                            for i,v in next, Visualizevelocity:GetChildren() do 
                                if v.Name ~= "HumanoidRootPart" and v:IsA("BasePart") then 
                                    v.Color = getgenv().VisualizeColor
                                    v.Transparency = getgenv().VisualizeTransparency
                                end 
                            end   
                        else 
                            for i,v in next, Visualizevelocity:GetChildren() do 
                                if v.Name ~= "HumanoidRootPart" and v:IsA("BasePart") then 
                                    v.Color = getgenv().VisualizeColor
                                    v.Transparency = 1
                                end 
                            end   
                            Visualizevelocity.HumanoidRootPart.CFrame = CFrame.new(999,999,999)
                        end 
                    end}):Colorpicker({pointer = 'visualize_velocity_color', default = Color3.new(1,1,1), Transparency = 0,callback = function(a)
                        getgenv().VisualizeColor = pointers["visualize_velocity_color"]:get().Color
                        getgenv().VisualizeTransparency = pointers["visualize_velocity_color"]:get().Transparency
                        if pointers["visualize_velocity"]:get()  then 
                            for i,v in next, Visualizevelocity:GetChildren() do 
                                if v.Name ~= "HumanoidRootPart" and v:IsA("BasePart") then 
                                    v.Color = getgenv().VisualizeColor
                                    v.Transparency = getgenv().VisualizeTransparency
                                end 
                            end    
                        end 
                    end}); 
                    velocity_section:Dropdown({name = "material", pointer = 'visualize_velocity_material', options = {'ForceField','Neon',"Plastic"}, default = 'ForceField',callback = function(a)
                        for i,v in pairs(Visualizevelocity:GetChildren()) do 
                            if v:IsA("BasePart") then 
                                v.Material = Enum.Material[a] 
                                v.Transparency = getgenv().VisualizeTransparency
                            end 
                        end 
                    end})
                    velocity_section:Dropdown({name = "Type", pointer = 'velocity_type', options = {"Manual", "Disable Prediction", "Prediction Multiplier","Unhittable","Follow Camera"}, default = 'Manual'})
                    velocity_section:Slider({name = "X", max = 50, min = -50, default = 0, pointer = 'Velocity_X', decimals = 1}) 
                    velocity_section:Slider({name = "Y", max = 50, min = -50, default = 0, pointer = 'Velocity_Y', decimals = 1}) 
                    velocity_section:Slider({name = "Z", max = 50, min = -50, default = 0, pointer = 'Velocity_Z', decimals = 1}) 
                    velocity_section:Slider({name = "Unhittable Power", max = 16, min = 0, default = 16, pointer = 'unhittable_power', decimals = 0.1}) 
                    velocity_section:Slider({name = "Follow Camera Power", max = 20, min = 0, default = 10, pointer = 'follow_camera_power', decimals = 0.1}) 
                    velocity_section:Slider({name = "Prediction Multiplier Power", max = 20, min = 0, default = 2, pointer = 'prediction_multiplier_power', decimals = 0.1}) 
                
                    network_section:Toggle({name = "Physic Bug", pointer = 'senderrate',callback = function(a)
                        if pointers["senderrate"]:get() then 
                            setfflag("S2PhysicsSenderRate", pointers["physic_delay"]:get())
                        else 
                            setfflag("S2PhysicsSenderRate", 15)
                        end 
                    end});
                    network_section:Slider({name = "Delay", max = 15, min = 0, default = 15, pointer = 'physic_delay', decimals = 0.1,callback = function(a)
                        if pointers["senderrate"]:get() then 
                            setfflag("S2PhysicsSenderRate", pointers["physic_delay"]:get())
                        end 
                    end}) 
                end
                
                local players_page = window:Page({name = "Players", size = 103}) do 
                getgenv().Player_List = players_page:PlayerList({})
    
                local Player_List_Left = players_page:Section({name = "Target", side = "Left"}) do
                    
                    Player_List_Left:Button({name = "Teleport To", confirmation = false, callback = function()
                        lp.Character.HumanoidRootPart.CFrame = game.Players[tostring(Player_List:GetSelection()[1])].Character.HumanoidRootPart.CFrame 
                    end})
                    -- 
                    Player_List_Left:Toggle({pointer = "view_player_selection", name = "View", def = false,callback = function()
                        if pointers["view_player_selection"]:get() then 
                            CC.CameraSubject = game.Players[tostring(Player_List:GetSelection()[1])].Character.Humanoid
                        else 
                            CC.CameraSubject = lp.Character.Humanoid
                        end 
                    end})
                    --
                    Player_List_Left:Toggle({pointer = "fling_player", name = "Fling Player", def = false})
                    --
                    Player_List_Left:Button({name = "Fix Camera", confirmation = false, callback = function()
                        CC.CameraSubject = lp.Character.Humanoid
                    end})
    
                end 
            end

            --// Shit Talk
            do 

                local ShitTalk = {
                    ["Osiris"] = {
                        "sorry guys 😭 I pasted stormy 😔",
                        "Injecting ChatGPT.Hook!",
                        "Blah Blah Blah 😭😭😭😭",
                        "Clipped! -🤓",
                        "Sorry guys 🥺 Im using 0 prediction resolver😢",
                        "farthook ontop!!!!",
                        "Osiris 💳💥💳💥💳💥💳💥",
                        "Farthook Successfully Injected!",
                        "Guys Im using jjsploit!!!",
                        "bwootooth dwevice rwaeady to pwear 🤖🤖🤖",
                        "Yun is the best script -🤖",
                        "Buy the script at gg/osr",
                        "🍑👅❓",
                        "mafafaka 😡",
                        "stormy.solutions is the best da hood script!!!",
                        "Bluetooth bullets: Enabled 🤖",
                    },
                    ["Yun"] = {
                        "YUN RUNS YOU"
                    },
                    ["Specter"] = {
                        "specter.lua > u",
                        "sonned?",
                        "sad life",
                        "u shall quit"
                    },
                    ["Anti Aim"] = {
                        "Cant resolve me!? Cant resolve me!? Cant resolve me!? Cant resolve me!? Cant resolve me!?"
                    },
                    ["Advertisement"] = {
                        "OSIRIS THE BEST BUY OSIRIS AT GG/OSR",
                        "GOOGOO GAH GAH NO OSIRIS 😭😭"
                    },
                    ["Scottish"] = {
                        "You Grandma Still Wears Shin Pads To Work 🤣🤣",
                        "Melon Head",
                        "Your Ma Is A Bin Man 🤣🤣",
                        "Your Da Sells Osiris 🤣🤣",
                        "Even Osiris Is Better Than You XD",
                        "Taped You Like I Did To Your Ma",
                        "Fore Headed Mong",
                        "Such A Fruit",
                        "YoUr A BoOt",
                        "keep Trying You Jobby",
                    },
                }
                local shit_talk = misc_page:Section({name = "Shit Talk", side = "Left",Size = 295,Fill = true})
                shit_talk:Toggle({name = "Enabled", pointer ='st'})
                shit_talk:Slider({name = "Delay", max = 10, min = 0, default = 1, pointer ='st_delay', decimals = 1});
                shit_talk:Dropdown({name = "Type", pointer ='st_type', options = {"Osiris","Yun","Specter","Anti Aim","Advertisement","Scottish"}, default = 'Osiris'})

                task.spawn(function()
                    while true do 
                        task.wait(pointers["st_delay"]:get())
                        if pointers["st"]:get() then 
                            local RandomChat = math.random(1,#ShitTalk[tostring(pointers["st_type"]:get())])
                            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(ShitTalk[tostring(pointers["st_type"]:get())][RandomChat],"All")
                        end 
                    end 
                end)
            end 
            
            do 
                local Stomps = {}

                for i,v in next, game.ReplicatedStorage.KillFX:GetChildren() do
                    table.insert(Stomps, v.Name)
                end

                local stomp_changer = misc_page:Section({name = "Stomp Changer", side = "Left",Size = 295,Fill = true})
                stomp_changer:Toggle({name = "Enabled", pointer ='stomp_changer'})
                stomp_changer:Dropdown({name = "Stomp", pointer ='stomp', options = Stomps, default = '',max = 10})
            end 
        end 
        
        local settings_page = window:Page({name = "Settings", size = 104}) do

            local config_section = settings_page:Section({name = "Configuration", side = "Left"}) do
                local current_list = {}
                local function update_config_list()
                    local list = {}
                    for idx, file in ipairs(listfiles("OsirisPro/configs")) do
                        local file_name = file:gsub("OsirisPro/configs\\", ""):gsub(".txt", "")
                        list[#list + 1] = file_name
                    end

                    local is_new = #list ~= #current_list
                    if not is_new then
                        for idx, file in ipairs(list) do
                            if file ~= current_list[idx] then
                                is_new = true
                                break
                            end
                        end
                    end

                    if is_new then
                        current_list = list
                        pointers["settings/configuration/list"]:UpdateList(list, false, true)
                    end
                end




                config_section:Listbox({pointer = "settings/configuration/list"})
                config_section:Textbox({pointer = "settings/configuration/name", placeholder = "Config Name", text = "", middle = true, reset_on_focus = false})
                config_section:Button({name = "Create", confirmation = true, callback = function()
                        local config_name = pointers["settings/configuration/name"]:get()
                        if config_name == "" or isfile("OsirisPro/configs/" .. config_name .. ".txt") then
                            return
                        end
        
                        writefile("OsirisPro/configs/" .. config_name .. ".txt", "")
                        update_config_list()

                    end})
                config_section:Button({name = "Load", confirmation = true, callback = function()
                        local selected_config = pointers["settings/configuration/list"]:get()[1][1]
                        if selected_config then
                            window:LoadConfig(readfile("OsirisPro/configs/" .. selected_config .. ".txt"))
                        end
                    end})
                config_section:Button({name = "Save", confirmation = true, callback = function()
                        local selected_config = pointers["settings/configuration/list"]:get()[1][1]
                        writefile("OsirisPro/configs/" .. selected_config .. ".txt", window:GetConfig())
                    end})
                config_section:Button({name = "Delete", confirmation = true, callback = function()
                        local selected_config = pointers["settings/configuration/list"]:get()[1][1]
                        if selected_config then
                            delfile("OsirisPro/configs/" .. selected_config .. ".txt")
                            update_config_list()
                        end
                    end})

                m_thread.spawn_loop(3, update_config_list)
            end
            
            local menu_section = settings_page:Section({name = "Menu"}) do
                --
                local function gs(a)
                    return game:GetService(a)
                end
                --
                local actionservice = gs('ContextActionService')
                --
                menu_section:Keybind(
                    {pointer = "settings/menu/bind", name = "Bind", default = Enum.KeyCode.Home, callback = function(p_state)
                        window.uibind = p_state
                    end})
                menu_section:Toggle(
                    {pointer = "settings/menu/watermark", name = "Watermark", callback = function(p_state)
                        window.watermark:Update("Visible", p_state)
                    end})
                menu_section:Textbox(
                    {placeholder = "Text", middle = true, pointer = 'watermarktext',text = "Osiris PRO | {fps} | {game} | {name} | {ping} | {date}",callback = function()
                        library.watermarktext = pointers["watermarktext"]:get()
                    end})
                menu_section:Toggle(
                    {pointer = "settings/menu/keybind_list", name = "Keybind List", callback = function(p_state)
                        window.keybindslist:Update("Visible", p_state)
                    end})

            local other_section = settings_page:Section({name = "Other", side = "Right"}) do
                other_section:Button(
                    {name = "Copy JobId", callback = function()
                        setclipboard(game.JobId)
                    end})
                    other_section:Button(
                        {name = "Copy GameID", callback = function()
                            setclipboard(game.GameId)
                        end})
                        other_section:Button(
                            {name = "Copy Game Invite", callback = function()
                                setclipboard('Roblox.GameLauncher.joinGameInstance('..game.PlaceId..',"'..game.JobId..'")')
                            end})
                other_section:Button(
                    {name = "Rejoin", confirmation = true, callback = function()
                        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, lp)
                    end})
                end

                local themes_section = settings_page:Section({name = "Themes", side = "Right"}) do
                    getgenv().AccentTheme = themes_section:Colorpicker(
                        {pointer = "themes/menu/accent", name = "Accent", default = Color3.fromRGB(210, 4, 45), callback = function(p_state)
                            library:UpdateColor("Accent", p_state)
                            Value_Slider.Color = p_state
                            Accent.Color = p_state
                        end})
                        themes_section:Colorpicker(
                        {pointer = "settings/menu/lightcontrast", name = "Light Contrast", default = Color3.fromRGB(30, 30, 30), callback = function(p_state)
                            library:UpdateColor("lightcontrast", p_state)
                            Frame.Color = p_state
                        end})   
                        themes_section:Colorpicker(
                        {pointer = "settings/menu/darkcontrast", name = "Dark Constrast", default = Color3.fromRGB(25, 25, 25), callback = function(p_state)
                            library:UpdateColor("darkcontrast", p_state)
                        end})
                        themes_section:Colorpicker(
                        {pointer = "settings/menu/outline", name = "Outline", default = Color3.fromRGB(0, 0, 0), callback = function(p_state)
                            library:UpdateColor("outline", p_state)
                        end})
                        themes_section:Colorpicker(
                        {pointer = "settings/menu/inline", name = "Inline", default = Color3.fromRGB(50, 50, 50), callback = function(p_state)
                            library:UpdateColor("inline", p_state)
                        end})   
                        themes_section:Colorpicker(
                        {pointer = "settings/menu/textcolor", name = "Text Color", default = Color3.fromRGB(255, 255, 255), callback = function(p_state)
                            library:UpdateColor("textcolor", p_state)
                        end})
                        themes_section:Colorpicker(
                        {pointer = "settings/menu/textborder", name = "Text Border", default = Color3.fromRGB(0, 0, 0), callback = function(p_state)
                            library:UpdateColor("textborder", p_state)
                        end})
                        themes_section:Colorpicker(
                        {pointer = "settings/menu/cursoroutline", name = "Cursor Outline", default = Color3.fromRGB(10, 10, 10), callback = function(p_state)
                            library:UpdateColor("cursoroutline", p_state)
                        end})   
            
                        local ThemeNames = {} 
            
                        for i,v in pairs(Themes) do 
                            table.insert(ThemeNames,i)
                        end 
            
                        themes_section:Dropdown({name = "Themes",options = ThemeNames, pointer = "Theme", callback = function(a)
                        end})
            
                        function loadTheme() 
                            pointers["themes/menu/accent"]:set(Themes[pointers["Theme"]:get()].Accent, 0)
                            pointers["settings/menu/lightcontrast"]:set(Themes[pointers["Theme"]:get()].lightcontrast, 0)
                            pointers["settings/menu/darkcontrast"]:set(Themes[pointers["Theme"]:get()].darkcontrast, 0)
                            pointers["settings/menu/outline"]:set(Themes[pointers["Theme"]:get()].outline, 0)
                            pointers["settings/menu/inline"]:set(Themes[pointers["Theme"]:get()].inline, 0)
                            pointers["settings/menu/textcolor"]:set(Themes[pointers["Theme"]:get()].textcolor, 0)
                            pointers["settings/menu/textborder"]:set(Themes[pointers["Theme"]:get()].textborder, 0)
                            pointers["settings/menu/cursoroutline"]:set(Themes[pointers["Theme"]:get()].cursoroutline, 0)
                        end 
            
                        themes_section:Button({name = "Load", confirmation = true, callback = function()
                            loadTheme() 
                        end})
            
            


                        themes_section:Toggle({pointer = "Rainbow Accent", name = "Rainbow Accent"})
            
                        themes_section:Slider({name = "Rainbow Speed", def = 10, min = 1, max = 4, sub = "", decimals = 0.01, pointer = "Rainbow Speed"})
                    end
                end
            end
        end 
        window.uibind = Enum.KeyCode.RightControl
        
        task.spawn(LPH_NO_VIRTUALIZE(function()
            while Run.RenderStepped:Wait() do 
                if lp.Character ~= nil then 
                    task.wait(0.3)
                    if getgenv().Loop then 
                        getgenv().Loop:Disconnect()
                    end 

                    if tool() and pointers["bullet_tracers"]:get() and lp.Information.Armory[tostring(lp.Character:FindFirstChildWhichIsA("Tool"))].Ammo.Normal then  
                        getgenv().Loop = lp.Information.Armory[tostring(lp.Character:FindFirstChildWhichIsA("Tool"))].Ammo.Normal.Changed:Connect(function()
                            if lp.Information.Armory[tostring(lp.Character:FindFirstChildWhichIsA("Tool"))].Ammo.Normal.Value ~= lp.Information.Armory[tostring(lp.Character:FindFirstChildWhichIsA("Tool"))].MaxAmmo.Normal.Value then 
                                createBeam(tool().Handle.Position, lp.Character["I_LOADED_I"].MousePos.Value) -- Creates beam to the mousepos instead of mousehit cause of lock
                                Run.RenderStepped:Wait() -- Fastest wait I can think of
                                for i,v in pairs(ws.Ignored:GetChildren()) do 
                                    if v:IsA("Part") and v.Name == "BULLET_RAYS" then 
                                        v:Destroy()
                                    end 
                                end 
                            end 
                        end)
                    end 
                end 
            end
        end))

        Angle = 0 
        SpinAngle = 0 

        Run.heartbeat:Connect(LPH_NO_VIRTUALIZE(function(FPS)
            if pointers["spinning_cursor"]:get() then 
                if pointers["dynamic_spin"]:get() then 
                    Speed = abs(sin(tick() * 1))
                    SpinAngle += rad(Speed*pointers["spin_speed"]:get()*5*FPS) 
                end 

                if not pointers["dynamic_spin"]:get() then 
                    SpinAngle += rad(pointers["spin_speed"]:get()*FPS)
                end 
            end 

            if getgenv().Bypass then 
                local lvle = lp.Character.HumanoidRootPart.Velocity
                local lcf = lp.Character.HumanoidRootPart.CFrame
                lp.Character.HumanoidRootPart.Velocity = Vector3.new(0,1,0) * -(2^10)
                lp.Character.HumanoidRootPart.CFrame = lcf * CFrame.Angles(0,0.001,0)
                Run.RenderStepped:Wait()
                lp.Character.HumanoidRootPart.Velocity = lvle
            end 

            if pointers["kill_aura"]:get() or pointers["stomp_aura"]:get() then 
                for _,q in pairs (game:GetService("Players"):GetPlayers()) do 
                    if q ~= lp and q.Character and q.Character:FindFirstChild("Humanoid") ~= nil then
                        local STAMagnitude = (lp.Character.HumanoidRootPart.Position - q.Character.HumanoidRootPart.Position).Magnitude
                        if 35 > STAMagnitude then  

                            if game.Players[q.Name].Character["I_LOADED_I"]["K.O"].Value == true and game.Players[q.Name].Character.Humanoid.Health > 0 and pointers["stomp_aura_key"]:is_active() and pointers["stomp_aura"]:get() then 
                                lp.Character.HumanoidRootPart.CFrame = game.Players[q.Name].Character.Head.CFrame 
                                game:GetService("ReplicatedStorage").MainRemote:FireServer("Stomp")
                            end 

                            if game.Players[q.Name].Character["I_LOADED_I"]["K.O"].Value == false and pointers["kill_aura_key"]:is_active() and pointers["kill_aura"]:get() then 
                                lp.Character.HumanoidRootPart.CFrame = game.Players[q.Name].Character.HumanoidRootPart.CFrame * CFrame.new(0 ,0 ,2)
                            end 

                        end
                    end
                end 
            end 
            if pointers["custom_cursor"]:get() then 
                game:GetService("UserInputService").OverrideMouseIconBehavior = Enum.OverrideMouseIconBehavior.ForceHide
                if pointers["spinning_cursor"]:get() then 
                    getgenv().SpinSize = pointers["cursor_gap"]:get()
    
                    if pointers["sine_animation"]:get() then 
                        getgenv().SpinSize = ((pointers["cursor_gap"]:get() * (abs(sin(tick() * pointers["sine_animation_speed"]:get()) + pointers["sine_animation_offset"]:get())))) 
                    end     
                    --// Hottest code :100:
                    Cursor.Line1.From = Vector2.new(Mouse.X,Mouse.Y + 36) + (Vector2.new(cos(SpinAngle), sin(SpinAngle))*(SpinSize + 1));
                    Cursor.Line1.To = Cursor.Line1.From + (Vector2.new(cos(SpinAngle), sin(SpinAngle))*pointers["cursor_size"]:get());
                    Cursor.Line2.From = Vector2.new(Mouse.X,Mouse.Y + 36)  + (Vector2.new(cos(SpinAngle + pi/2), sin(SpinAngle + pi/2))*(SpinSize + 1));
                    Cursor.Line2.To = Cursor.Line2.From + (Vector2.new(cos(SpinAngle + pi/2), sin(SpinAngle + pi/2))*pointers["cursor_size"]:get());
                    Cursor.Line3.From = Vector2.new(Mouse.X,Mouse.Y + 36)  + (Vector2.new(cos(SpinAngle + pi), sin(SpinAngle + pi))*(SpinSize + 1));
                    Cursor.Line3.To = Cursor.Line3.From + (Vector2.new(cos(SpinAngle + pi), sin(SpinAngle + pi))*pointers["cursor_size"]:get());
                    Cursor.Line4.From = Vector2.new(Mouse.X,Mouse.Y + 36)  + (Vector2.new(cos(SpinAngle + pi/2*3), sin(SpinAngle + pi/2*3))*(SpinSize + 1));
                    Cursor.Line4.To = Cursor.Line4.From + (Vector2.new(cos(SpinAngle + pi/2*3), sin(SpinAngle + pi/2*3))*pointers["cursor_size"]:get());
    
                    Outlines.OutlineLine1.From = Vector2.new(Mouse.X,Mouse.Y + 36) + (Vector2.new(cos(SpinAngle), sin(SpinAngle))*(SpinSize + 1));
                    Outlines.OutlineLine1.To = Cursor.Line1.From + (Vector2.new(cos(SpinAngle), sin(SpinAngle))*pointers["cursor_size"]:get());
                    Outlines.OutlineLine2.From = Vector2.new(Mouse.X,Mouse.Y + 36)  + (Vector2.new(cos(SpinAngle + pi/2), sin(SpinAngle + pi/2))*(SpinSize + 1));
                    Outlines.OutlineLine2.To = Cursor.Line2.From + (Vector2.new(cos(SpinAngle + pi/2), sin(SpinAngle + pi/2))*pointers["cursor_size"]:get());
                    Outlines.OutlineLine3.From = Vector2.new(Mouse.X,Mouse.Y + 36)  + (Vector2.new(cos(SpinAngle + pi), sin(SpinAngle + pi))*(SpinSize + 1));
                    Outlines.OutlineLine3.To = Cursor.Line3.From + (Vector2.new(cos(SpinAngle + pi), sin(SpinAngle + pi))*pointers["cursor_size"]:get());
                    Outlines.OutlineLine4.From = Vector2.new(Mouse.X,Mouse.Y + 36)  + (Vector2.new(cos(SpinAngle + pi/2*3), sin(SpinAngle + pi/2*3))*(SpinSize + 1));
                    Outlines.OutlineLine4.To = Cursor.Line4.From + (Vector2.new(cos(SpinAngle + pi/2*3), sin(SpinAngle + pi/2*3))*pointers["cursor_size"]:get());
                end 
                
                if not pointers["spinning_cursor"]:get() then 
                    Cursor.Line1.From = Vector2.new(Mouse.X + pointers["cursor_gap"]:get() * 5 , Mouse.Y + 36)
                    Cursor.Line1.To = Vector2.new(Mouse.X + pointers["cursor_size"]:get() * 5, Mouse.Y+ 36)
                    Cursor.Line2.From = Vector2.new(Mouse.X - pointers["cursor_gap"]:get() * 5, Mouse.Y+ 36)
                    Cursor.Line2.To = Vector2.new(Mouse.X - pointers["cursor_size"]:get() * 5 , Mouse.Y+ 36)
                    Cursor.Line3.From = Vector2.new(Mouse.X, Mouse.Y - pointers["cursor_gap"]:get() * 5 + 36)
                    Cursor.Line3.To = Vector2.new(Mouse.X, Mouse.Y - pointers["cursor_size"]:get() * 5+ 36)
                    Cursor.Line4.From = Vector2.new(Mouse.X, Mouse.Y + pointers["cursor_gap"]:get() * 5+ 36)
                    Cursor.Line4.To = Vector2.new(Mouse.X, Mouse.Y + pointers["cursor_size"]:get() * 5+ 36)
                    
                    Outlines.OutlineLine1.From = Vector2.new(Mouse.X + pointers["cursor_gap"]:get() * 5, Mouse.Y + 36)
                    Outlines.OutlineLine1.To = Vector2.new(Mouse.X + pointers["cursor_size"]:get() * 5, Mouse.Y+ 36)
                    Outlines.OutlineLine2.From = Vector2.new(Mouse.X - pointers["cursor_gap"]:get() * 5, Mouse.Y+ 36)
                    Outlines.OutlineLine2.To = Vector2.new(Mouse.X - pointers["cursor_size"]:get() * 5 , Mouse.Y+ 36)
                    Outlines.OutlineLine3.From = Vector2.new(Mouse.X, Mouse.Y - pointers["cursor_gap"]:get() * 5 + 36)
                    Outlines.OutlineLine3.To = Vector2.new(Mouse.X, Mouse.Y - pointers["cursor_size"]:get() * 5+ 36)
                    Outlines.OutlineLine4.From = Vector2.new(Mouse.X, Mouse.Y + pointers["cursor_gap"]:get() * 5+ 36)
                    Outlines.OutlineLine4.To = Vector2.new(Mouse.X, Mouse.Y + pointers["cursor_size"]:get()* 5+ 36)
                end 
            end 

            if pointers["fling_player"]:get() then 
                local OldVelocityFling = lp.Character.HumanoidRootPart.Velocity
                lp.Character.HumanoidRootPart.CFrame = game.Players[tostring(Player_List:GetSelection()[1])].Character.HumanoidRootPart.CFrame 
                lp.Character.HumanoidRootPart.Velocity = Vector3.new(0,1,0) * -16384
                Run.RenderStepped:Wait() 
                lp.Character.HumanoidRootPart.Velocity = OldVelocityFling
                lp.Character.HumanoidRootPart.CFrame = game.Players[tostring(Player_List:GetSelection()[1])].Character.HumanoidRootPart.CFrame 
            end 

            if pointers["aim_assist_enabled"]:get() and pointers["aim_assist_key"]:is_active() then 
                if Lock.Visible then 
                    getgenv().InFOVRangeAimAssist = FOVCHECK(CTarget) 
                else 
                    getgenv().InFOVRangeAimAssist = true 
                end 
                if pointers["aim_assist_resolver"]:get() and pointers["aim_assist_resolver_keybind"]:is_active() then 
                    getgenv().Main = CC:WorldToScreenPoint(CTarget.Character[pointers["aim_assist_hitbox"]:get()].Position + (CTarget.Character.Humanoid.MoveDirection * pointers["aim_assist_prediction"]:get()))
                else 
                    getgenv().Main = CC:WorldToScreenPoint(CTarget.Character[pointers["aim_assist_hitbox"]:get()].Position + (CTarget.Character.HumanoidRootPart.Velocity * pointers["aim_assist_prediction"]:get()))
                end 
                if InFOVRangeAimAssist then 
                    mousemoverel(Vector2.new(Main.X - Mouse.X,Main.Y - Mouse.Y).X / (pointers["x_smoothing"]:get() + 1), Vector2.new(Main.X - Mouse.X,Main.Y - Mouse.Y).Y / (pointers["y_smoothing"]:get() + 1))
                end 
            end 
            if lp.Character then 
                getgenv().OldPosition = lp.Character.HumanoidRootPart.CFrame
                if pointers["cframe_desync"]:get() then
                    if pointers["cframe_desync_key"]:is_active() then 
                        if pointers["custom_cframe"]:get() then 
                            lp.Character.HumanoidRootPart.CFrame = lp.Character.HumanoidRootPart.CFrame * CFrame.new(pointers["CFrame_X"]:get(),pointers["CFrame_Y"]:get(),pointers["CFrame_Z"]:get()) * CFrame.Angles(rad(pointers["pitch"]:get()),rad(pointers["yaw"]:get()),rad(pointers["roll"]:get()))
                            if pointers["visualize_cframe"]:get() then 
                                Visualizecframe.HumanoidRootPart.CFrame = lp.Character.HumanoidRootPart.CFrame * CFrame.new(pointers["CFrame_X"]:get(),pointers["CFrame_Y"]:get(),pointers["CFrame_Z"]:get()) * CFrame.Angles(rad(pointers["pitch"]:get()),rad(pointers["yaw"]:get()),rad(pointers["roll"]:get()))
                            end 
                        end 
            
                        if pointers["CFrame_Type"]:get() == "Random" then 
                            local TargetPos = lp.Character.HumanoidRootPart.Position
                            local Random_CFrame = (CFrame.new(TargetPos) + Vector3.new(math.random(-pointers["random_range"]:get(), pointers["random_range"]:get()), math.random(-pointers["random_range"]:get(), pointers["random_range"]:get()), math.random(-pointers["random_range"]:get(), pointers["random_range"]:get()))) * CFrame.Angles(math.rad(math.random(-180, 180)), math.rad(math.random(-180, 180)), math.rad(math.random(-180, 180)))
                            lp.Character.HumanoidRootPart.CFrame = Random_CFrame 
                            if pointers["visualize_cframe"]:get() then 
                                Visualizecframe.HumanoidRootPart.CFrame = Random_CFrame
                            end 
                        end 
            
                        if pointers["CFrame_Type"]:get() == "Upside Down" then 
                            lp.Character.HumanoidRootPart.CFrame = lp.Character.HumanoidRootPart.CFrame * CFrame.Angles(0,0,math.rad(-180))
                            if pointers["visualize_cframe"]:get() then 
                                Visualizecframe.HumanoidRootPart.CFrame = lp.Character.HumanoidRootPart.CFrame
                            end 
                        end 
            
                        if pointers["CFrame_Type"]:get() == "Floor Plant" then 
                            local Floor_Plant = lp.Character.HumanoidRootPart.CFrame * CFrame.new(0,-4,0) * CFrame.Angles(0,math.rad(math.random(1,360)),math.rad(-180))
                            lp.Character.HumanoidRootPart.CFrame = Floor_Plant
                            if pointers["visualize_cframe"]:get() then 
                                Visualizecframe.HumanoidRootPart.CFrame = Floor_Plant
                            end 
                        end 
            
                        if pointers["CFrame_Type"]:get() == "Sine" then 
                            local Sine_Value = math.abs(math.sin(tick() * (pointers["sine_speed"]:get()/5)))
                            lp.Character.HumanoidRootPart.CFrame = lp.Character.HumanoidRootPart.CFrame * CFrame.Angles(math.rad(Sine_Value*360),math.rad(Sine_Value*360),math.rad(Sine_Value*360))
                            if pointers["visualize_cframe"]:get() then 
                                Visualizecframe.HumanoidRootPart.CFrame = lp.Character.HumanoidRootPart.CFrame * CFrame.Angles(math.rad(Sine_Value*360),math.rad(Sine_Value*360),math.rad(Sine_Value*360))
                            end 
                        end 

                        Run.RenderStepped:Wait()
                        lp.Character.HumanoidRootPart.CFrame = getgenv().OldPosition
                    end 
                end 
    
                if pointers["velocity_desync"]:get() then 
                    getgenv().OldVelocity = lp.Character.HumanoidRootPart.Velocity
                    if pointers["velocity_desync_key"]:is_active() then 
                        lp.Character.HumanoidRootPart.CFrame = lp.Character.HumanoidRootPart.CFrame * CFrame.Angles(0,math.rad(0.001),0)
        
                        if pointers["velocity_type"]:get() == "Manual" then 
                            lp.Character.HumanoidRootPart.Velocity = Vector3.new(pointers["Velocity_X"]:get()/2500,pointers["Velocity_Y"]:get()/2500,pointers["Velocity_Z"]:get()/2500) * 2^16
                        elseif pointers["velocity_type"]:get() == "Disable Prediction" then 
                            lp.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0)
                        elseif pointers["velocity_type"]:get() == "Unhittable" then
                            lp.Character.HumanoidRootPart.Velocity = Vector3.new(1,1,1) * -(2^pointers["unhittable_power"]:get())
                            lp.Character.HumanoidRootPart.CFrame = lp.Character.HumanoidRootPart.CFrame * CFrame.Angles(0,math.rad(0.001),0)
                        elseif pointers["velocity_type"]:get() == "Follow Camera" then
                            lp.Character.HumanoidRootPart.AssemblyLinearVelocity = (Mouse.hit.p - lp.Character.HumanoidRootPart.Position).Unit * (pointers["follow_camera_power"]:get()*5) + Camera.CFrame.LookVector * (pointers["follow_camera_power"]:get()*5)
                        elseif pointers["velocity_type"]:get() == "Prediction Multiplier" then
                            lp.Character.HumanoidRootPart.Velocity = lp.Character.HumanoidRootPart.Velocity * pointers["prediction_multiplier_power"]:get()
                        end
                        getgenv().Visualizer = lp.Character.HumanoidRootPart.Velocity
            
                        if pointers["visualize_velocity"]:get() then 
                            if getgenv().Visualizer ~= nil then 
                                Visualizevelocity.HumanoidRootPart.CFrame = CFrame.new(lp.Character.HumanoidRootPart.Position + getgenv().Visualizer * 0.1413)
                            end 
                        end
    
                        Run.RenderStepped:Wait()
                        lp.Character.HumanoidRootPart.Velocity = getgenv().OldVelocity
                    end 
                end 
            end 
    
            if pointers["anti_jump_cooldown"]:get() and lp.Character and lp.Character.Humanoid.UseJumpPower == true then 
                lp.Character.Humanoid.UseJumpPower = false
            end 
    
            if pointers["anti_stomp"]:get() then 
                if lp.Character.Humanoid.Health < 5 then
                    local OldVelocityFling = lp.Character.HumanoidRootPart.Velocity
                    lp.Character.HumanoidRootPart.Velocity = Vector3.new(1,1,1) * 2^16
                    Run.RenderStepped:Wait()  
                    lp.Character.HumanoidRootPart.Velocity = Vector3.new(1,1,1) * 2^16
                    lp.Character.HumanoidRootPart.Velocity = OldVelocityFling
                end
            end 

    
            if pointers["auto_stomp"]:get() then 
                game.ReplicatedStorage.MainEvent:FireServer("Stomp")
            end 
    
            if pointers["auto_reload"]:get() and lp.Character:FindFirstChildWhichIsA("Tool") ~= nil then 
                if lp.Information.Armory[tostring(lp.Character:FindFirstChildWhichIsA("Tool"))].Ammo.Normal.Value <= 0 then 
                    game:GetService("ReplicatedStorage").MainRemote:FireServer("Reload")
                end 
            end 

            if pointers["fast_db"]:get() and lp.Character:FindFirstChildWhichIsA("Tool") ~= nil and lp.Character:FindFirstChildWhichIsA("Tool").Name == "[Double Barrel SG]" then 
                if lp.Information.Armory[tostring(lp.Character:FindFirstChildWhichIsA("Tool"))].Ammo.Normal.Value == 1 then 
                    game:GetService("ReplicatedStorage").MainRemote:FireServer("Reload")
                end 
            end 

            if pointers["speed"]:get() and pointers["speed_key"]:is_active() then 
                lp.Character.HumanoidRootPart.CFrame = lp.Character.HumanoidRootPart.CFrame + lp.Character.Humanoid.MoveDirection * (pointers["speed_power"]:get()/25)
                if pointers["auto_jump"]:get() and lp.Character.Humanoid.FloorMaterial ~= Enum.Material.Air then 
                    lp.Character.Humanoid:ChangeState("Jumping")
                    lp.Character.Humanoid.UseJumpPower = false
                end     
            end 

            if pointers["spin"]:get() and pointers["spin_key"]:is_active() then 
                lp.Character.HumanoidRootPart.CFrame = lp.Character.HumanoidRootPart.CFrame * CFrame.Angles(0,math.rad(pointers["spin_power"]:get()),0)
                lp.Character.Humanoid.AutoRotate = false
            end 
    
            if pointers["fly"]:get() and pointers["fly_key"]:is_active() then 
                local FlyPosition = Vector3.new(0,0,0)
                local CCV = game.Workspace.CurrentCamera.CFrame.lookVector
            
                if UIS:IsKeyDown(Enum.KeyCode.W) then
                    FlyPosition = FlyPosition + CCV
                end
            
                if UIS:IsKeyDown(Enum.KeyCode.S) then
                    FlyPosition = FlyPosition - CCV
                end
            
                if UIS:IsKeyDown(Enum.KeyCode.D) then
                    FlyPosition = FlyPosition + Vector3.new(-CCV.Z, 0, CCV.X)
                end
            
                if UIS:IsKeyDown(Enum.KeyCode.A) then
                    FlyPosition = FlyPosition + Vector3.new(CCV.Z, 0, -CCV.x)
                end
                
                if UIS:IsKeyDown(Enum.KeyCode.Space) then
                    FlyPosition = FlyPosition + Vector3.new(0, 1, 0)
                end
                
                if UIS:IsKeyDown(Enum.KeyCode.LeftShift) then
                    FlyPosition = FlyPosition - Vector3.new(0, 1, 0)
                end
                
                if FlyPosition.Unit.y == FlyPosition.Unit.y then
                    lp.Character.HumanoidRootPart.Anchored = false 
                    lp.Character.HumanoidRootPart.Velocity = FlyPosition.Unit * pointers["fly_speed"]:get()
                else 
                    lp.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                    lp.Character.HumanoidRootPart.Anchored = true
                end 
            end 
    
            if pointers["jitter"]:get() and pointers["jitter_key"]:is_active() then 
                local RandomJit = math.random(1, 180)
                lp.Character.Humanoid.AutoRotate = false
                lp.Character.HumanoidRootPart.CFrame = CFrame.new(lp.Character.HumanoidRootPart.CFrame.Position) * CFrame.Angles(0, math.rad(RandomJit) + math.rad((math.random(1, 2) == 1 and RandomJit or -RandomJit)), 0) 
            end 
            


            if Target ~= nil and pointers["lock_enabled"]:get() and pointers["lock_key"]:is_active() and Target.Character and Target.Character.Humanoid and Target.Character.Humanoid.Health > 0 and KnockCheck(Target) then 
                getgenv().HitPart = ClosestPart(Target,pointers["hitpart"]:get()).Name
                getgenv().BehindWall = WallCheck(Target.Character.Head)
                getgenv().Knocked = KnockCheck(Target) 
                getgenv().InFOVRange = FOVCHECK(Target) 
                getgenv().Prediction = pointers["lock_prediction"]:get()

                if pointers["snap_line"]:get() then 
                    local ScreenPosition = CC:WorldToScreenPoint(Target.Character[getgenv().HitPart].Position)
                    Tracer.Visible = true 
                    Tracer.From = Vector2.new(Mouse.X,Mouse.Y+36)
                    Tracer.To = Vector2.new(ScreenPosition.X,ScreenPosition.Y+36)
                end 
    
                if Target.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then 
                    getgenv().jump_offset = pointers["jump_offset"]:get()
                else 
                    getgenv().jump_offset = 0
                end 
            
                if pointers["target_strafe"]:get() and getgenv().Bypass then 
                    Angle += pointers["strafe_speed"]:get()
                    lp.Character.HumanoidRootPart.CFrame = Target.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(Angle), 0) * CFrame.new(0, pointers["strafe_height"]:get(), pointers["strafe_radius"]:get())
                end 
    
                if pointers["look_at"]:get() and lp.Character then 
                    lp.Character.Humanoid.AutoRotate = false 
                    local OldCframe = lp.Character.PrimaryPart
                    local NearestRoot = Target.Character.HumanoidRootPart
                    local NearestPos = CFrame.new(lp.Character.PrimaryPart.Position, Vector3.new(NearestRoot.Position.X, OldCframe.Position.Y, NearestRoot.Position.Z))
                    lp.Character:SetPrimaryPartCFrame(NearestPos)
                end 
                
                if pointers["part_enabled"]:get() then 
                    if pointers["part_velocity_enabled"]:get() then 
                        TargetPart.CFrame = Target.Character[HitPart].CFrame + (Target.Character.HumanoidRootPart.Velocity * Prediction)
                    else 
                        TargetPart.CFrame = Target.Character[HitPart].CFrame
                    end 
                end 
    
                if pointers["part_chams"]:get() then 
                    for Index,Value in pairs(game.Workspace.Terrain:GetChildren()) do 
                        if Value:IsA("BasePart") then 
                            Value.Position = Target.Character[Value.Name].Position + Target.Character.HumanoidRootPart.Velocity * 0.1413
                            Value.Rotation = Target.Character[Value.Name].Rotation
                        end     
                    end 
                end 
            end 

            if pointers["settings/menu/visuals_custom_ambient"]:get() then
                Lighting.Ambient = pointers["settings/menu/visuals_ambient"]:get().Color
                Lighting.OutdoorAmbient = pointers["settings/menu/visuals_outdoor_ambient"]:get().Color
            end
            if pointers["settings/menu/visuals_custom_color_shift"]:get() then
                Lighting.ColorShift_Top = pointers["settings/menu/visuals_custom_color_shift_top"]:get().Color
                Lighting.ColorShift_Bottom = pointers["settings/menu/visuals_custom_color_shift_bottom"]:get().Color
            end
            if pointers["settings/menu/visuals_custom_shadows"]:get() then
                Lighting.GlobalShadows = true
                Lighting.ShadowColor = pointers["settings/menu/visuals_custom_shadows_color"]:get().Color
                Lighting.ShadowSoftness = pointers["settings/menu/visuals_custom_shadows_softness"]:get()
            else
                Lighting.GlobalShadows = false
            end
            if pointers["settings/menu/visuals_custom_brightness"]:get() then
                Lighting.Brightness = pointers["settings/menu/visuals_custom_brightness_number"]:get()
            end
            if pointers["settings/menu/visuals_custom_exposure"]:get() then
                Lighting.ExposureCompensation = pointers["settings/menu/visuals_custom_exposure_number"]:get()
            end
            if pointers["settings/menu/visuals_custom_clock_time"]:get() then
                Lighting.ClockTime = pointers["settings/menu/visuals_custom_clock_time_number"]:get()
            end
            if pointers["settings/menu/visuals_fog"]:get() then
                Lighting.FogStart = pointers["settings/menu/visuals_fog_start"]:get()
                Lighting.FogEnd = pointers["settings/menu/visuals_fog_end"]:get()
                Lighting.FogColor = pointers["settings/menu/visuals_fog_color"]:get().Color
            end
            --
            if pointers["settings/menu/visuals_custom_fov"]:get() then
                Camera.FieldOfView = pointers["settings/menu/visuals_custom_fov_number"]:get()
            end
        end))

        Run:BindToRenderStep("updateSilentAim", 1, LPH_NO_VIRTUALIZE(function()
            if pointers["custom_gun_sfx"]:get() and lp.Character ~= nil and lp.Character:FindFirstChildWhichIsA("Tool") ~= nil then 
                for i,v in pairs(lp.Character:FindFirstChildWhichIsA("Tool").Handle:GetChildren()) do 
                    if v:IsA("Sound") then 
                        v.SoundId = "rbxassetid://".. getgenv().sfx[pointers["Sound"]:get()]..""
                    end 
                end 
            end 

            if pointers["body_enabled"]:get() and lp.Character ~= nil then 
                for i,v in pairs(lp.Character:GetDescendants()) do 
                    if v:IsA("BasePart") then 
                        v.Material = Enum.Material.ForceField
                        v.Color = pointers["body_color"]:get().Color
                    end 
                end 
            end     



            if pointers["Rainbow Accent"]:get() then 
                local Color = Color3.fromHSV(abs(sin(tick()) / (5 - pointers["Rainbow Speed"]:get())),1,1)
                library:UpdateColor("Accent", Color)
                Value_Slider.Color = Color
                Accent.Color = Color
            end 

            if pointers["gun_enabled"]:get() and lp.Character:FindFirstChildWhichIsA("Tool") ~= nil then 
                lp.Character:FindFirstChildWhichIsA("Tool").Handle.Material = Enum.Material.Neon
                lp.Character:FindFirstChildWhichIsA("Tool").Handle.Color = pointers["gun_color"]:get().Color
            end 

            if Target ~= nil and pointers["lock_enabled"]:get() and pointers["lock_key"]:is_active() and Target and Target.Character and Target.Character.Humanoid and Target.Character.Humanoid.Health > 0 and KnockCheck(Target) and pointers["target_stats"]:get() then 
                local Z = math.floor(Target.Character.Humanoid.Health)
                Sliders["Health"]:Set(Z / 100, (math.floor(Z / 0.01) * 0.01) .. "")
            end 

            for _, v in pairs(lp.Character:GetChildren()) do
                if v:IsA("Script") and v.Name ~= "Health" and v.Name ~= "Sound" and v:FindFirstChild("LocalScript") then
                    v:Destroy()
                end
            end
    
            if pointers["lock_enabled"]:get() and pointers["lock_type"]:get() == "Silent Aim" then 
                getgenv().Test = getClosestPlayerToCursor(math.huge)
                if Test and Test.Character and Test.Character.Humanoid and KnockCheck(Test) then 
                    getgenv().Target = getgenv().Test
                end
            end 
        end))
            
    local Old
    Old = hookmetamethod(game, "__namecall", LPH_NO_VIRTUALIZE(function(self,...)
        local method = getnamecallmethod()

        if method == "FireServer" and self.Name == "Bullets" then  
            local args = {...}
            if args[1] == "MousePos" and Target ~= nil and pointers["lock_enabled"]:get() and Target.Character and not getgenv().BehindWall and getgenv().InFOVRange then
                if pointers["resolver"]:get() and pointers["resolver_keybind"]:is_active() then 
                    args[2] = Target.Character[HitPart].Position + (Target.Character.Humanoid.MoveDirection *  pointers["lock_prediction"]:get()*19.64285714289) + Vector3.new(0.1,jump_offset,0.1)
                else 
                    args[2] = Target.Character[HitPart].Position + (Target.Character.HumanoidRootPart.Velocity *  pointers["lock_prediction"]:get()) + Vector3.new(0.1,jump_offset,0.1)
                end 
                return Old(self,unpack(args))
            end 
        end 

        if method == "FireServer" and self.Name == "MainRemote" then 
            local args = {...}
            if tostring(args[1]) == "Stomp" then
                coroutine.wrap(function()
                    Stomping = true 
                    task.wait(1) 
                    Stomping = false 
                end)()
            end 
        end 
        return Old(self,...)
    end))

    local Streak = lp.Information.Streaks
    local OldValue = lp.Information.Streaks.Value

    Streak:GetPropertyChangedSignal("Value"):Connect(function()
        if lp.Information.Streaks.Value > OldValue then
            task.spawn(function()
                if Stomping == true then
                    local Part = workspace:FindPartOnRayWithIgnoreList(Ray.new(lp.Character.LowerTorso.Position, Vector3.new(0, -lp.Character.UpperTorso.Size.y * 4.5, 0)), { lp.Character, workspace:WaitForChild("Ignored")});
                    if Part and Part:IsDescendantOf(game.workspace.Characters) then
                        local Humanoid
                        print("Part: "..Part.Name)
                        if Part.Parent:FindFirstChild('Humanoid') then
                            Humanoid = Part.Parent:FindFirstChild('Humanoid')
                        elseif Part.Parent.Parent:FindFirstChild('Humanoid') then
                            Humanoid = Part.Parent.Parent:FindFirstChild('Humanoid')
                        elseif Part.Parent.Parent.Parent:FindFirstChild('Humanoid') then
                            Humanoid = Part.Parent.Parent.Parent:FindFirstChild('Humanoid')
                        end
                        
                        if Humanoid then
                        local vCharacter = Humanoid.Parent
                        local vPlayer = Players:GetPlayerFromCharacter(vCharacter)
                        print("Name: ".. vPlayer.Name)
                        if game.ReplicatedStorage.KillFX:FindFirstChild(pointers["stomp"]:get()) then
                            local Module = require(game.ReplicatedStorage.KillFX:FindFirstChild(pointers["stomp"]:get()))
                            Module.RunStompFx(pointers["stomp"]:get(), vCharacter.HumanoidRootPart, vPlayer)
                            end
                        end
                    end
                end
            end)
        end
        OldValue = lp.Information.Streaks.Value
    end)

    local oldIndex
    oldIndex = hookmetamethod(game, "__index", LPH_NO_VIRTUALIZE(function(self, key)
            if not checkcaller() then
                if key == "CFrame" and pointers["cframe_desync"]:get() and pointers["cframe_desync_key"]:is_active() and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") and lp.Character:FindFirstChild("Humanoid") and lp.Character:FindFirstChild("Humanoid").Health > 0 then
                    if self == lp.Character.HumanoidRootPart and getgenv().OldPosition ~= nil then
                        return getgenv().OldPosition 
                    end
                end
            end
        return oldIndex(self, key)
    end))

    local OldNewIndex;
    OldNewIndex = hookmetamethod(game, "__newindex", LPH_NO_VIRTUALIZE(function(self, Key, Value)
        if (self == game.Workspace.CurrentCamera and Key == "CFrame") and pointers["settings/menu/visuals_aspect"]:get() then 
            local X, Y, Z, R00, R01, R02, R10, R11, R12, R20, R21, R22 = Value:GetComponents()
            Value = CFrame.new(X, Y, Z, R00, R01 * pointers["settings/menu/visuals_aspect_ratio_x"]:get()/100, R02, R10, R11 * pointers["settings/menu/visuals_aspect_ratio_x"]:get()/100, R12, R20, R21 * pointers["settings/menu/visuals_aspect_ratio_x"]:get()/100, R22)
        end
        return OldNewIndex(self, Key, Value)
    end))

    window:Initialize()
    window.notificationlist:AddNotification({text = "Osiris Pro Has Loaded! Enjoy",lifetime = 2})

    UIS.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            Lock.Position = Vector2.new(Mouse.X,Mouse.Y + 36)
            LockOutline.Position = Vector2.new(Mouse.X,Mouse.Y + 36)
        end
    end)
end 
